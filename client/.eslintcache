[{"/Users/electronic/Documents/projects/kip/TasksManager/client/src/index.tsx":"1","/Users/electronic/Documents/projects/kip/TasksManager/client/src/store.ts":"2","/Users/electronic/Documents/projects/kip/TasksManager/client/src/serviceWorker.ts":"3","/Users/electronic/Documents/projects/kip/TasksManager/client/src/components/App/App.tsx":"4","/Users/electronic/Documents/projects/kip/TasksManager/client/src/actions/tasksActions.ts":"5","/Users/electronic/Documents/projects/kip/TasksManager/client/src/actions/workshopsActions.ts":"6","/Users/electronic/Documents/projects/kip/TasksManager/client/src/actions/authActions.ts":"7","/Users/electronic/Documents/projects/kip/TasksManager/client/src/actions/personsActions.ts":"8","/Users/electronic/Documents/projects/kip/TasksManager/client/src/reducers/index.ts":"9","/Users/electronic/Documents/projects/kip/TasksManager/client/src/components/TasksPage/index.ts":"10","/Users/electronic/Documents/projects/kip/TasksManager/client/src/components/PersonsPage/index.ts":"11","/Users/electronic/Documents/projects/kip/TasksManager/client/src/components/NavDrawer/index.ts":"12","/Users/electronic/Documents/projects/kip/TasksManager/client/src/components/SettingsPage/index.ts":"13","/Users/electronic/Documents/projects/kip/TasksManager/client/src/components/Auth/index.ts":"14","/Users/electronic/Documents/projects/kip/TasksManager/client/src/components/StatisticsPage/index.ts":"15","/Users/electronic/Documents/projects/kip/TasksManager/client/src/actions/actionTypes.ts":"16","/Users/electronic/Documents/projects/kip/TasksManager/client/src/utils/location.ts":"17","/Users/electronic/Documents/projects/kip/TasksManager/client/src/reducers/workshops.ts":"18","/Users/electronic/Documents/projects/kip/TasksManager/client/src/reducers/tasks.ts":"19","/Users/electronic/Documents/projects/kip/TasksManager/client/src/reducers/filter.ts":"20","/Users/electronic/Documents/projects/kip/TasksManager/client/src/reducers/user.ts":"21","/Users/electronic/Documents/projects/kip/TasksManager/client/src/reducers/persons.ts":"22","/Users/electronic/Documents/projects/kip/TasksManager/client/src/reducers/statistics.ts":"23","/Users/electronic/Documents/projects/kip/TasksManager/client/src/api/index.ts":"24","/Users/electronic/Documents/projects/kip/TasksManager/client/src/components/PersonsPage/PersonsPage.tsx":"25","/Users/electronic/Documents/projects/kip/TasksManager/client/src/components/TasksPage/TasksPageMobile.tsx":"26","/Users/electronic/Documents/projects/kip/TasksManager/client/src/components/TasksPage/TasksPageDesktop.tsx":"27","/Users/electronic/Documents/projects/kip/TasksManager/client/src/components/NavDrawer/NavDrawer.tsx":"28","/Users/electronic/Documents/projects/kip/TasksManager/client/src/components/SettingsPage/SettingsPage.tsx":"29","/Users/electronic/Documents/projects/kip/TasksManager/client/src/components/Auth/Auth.tsx":"30","/Users/electronic/Documents/projects/kip/TasksManager/client/src/components/StatisticsPage/StatisticsPage.tsx":"31","/Users/electronic/Documents/projects/kip/TasksManager/client/src/api/serverApi.ts":"32","/Users/electronic/Documents/projects/kip/TasksManager/client/src/utils/formatTime.ts":"33","/Users/electronic/Documents/projects/kip/TasksManager/client/src/components/SettingsPage/styles.ts":"34","/Users/electronic/Documents/projects/kip/TasksManager/client/src/components/StatisticsPage/styles.ts":"35","/Users/electronic/Documents/projects/kip/TasksManager/client/src/actions/statisticsActions.ts":"36","/Users/electronic/Documents/projects/kip/TasksManager/client/src/components/PersonsPage/PersonItem.tsx":"37","/Users/electronic/Documents/projects/kip/TasksManager/client/src/components/PersonsPage/NewPerson.tsx":"38","/Users/electronic/Documents/projects/kip/TasksManager/client/src/components/TasksPage/components/DesktopTaskItem.tsx":"39","/Users/electronic/Documents/projects/kip/TasksManager/client/src/components/TasksPage/components/NewTaskForm.tsx":"40","/Users/electronic/Documents/projects/kip/TasksManager/client/src/components/TasksPage/components/MobileTaskItem.tsx":"41","/Users/electronic/Documents/projects/kip/TasksManager/client/src/components/NavDrawer/components/Acces.tsx":"42","/Users/electronic/Documents/projects/kip/TasksManager/client/src/components/NavDrawer/components/FixedBtn.tsx":"43","/Users/electronic/Documents/projects/kip/TasksManager/client/src/components/NavDrawer/components/Search.tsx":"44","/Users/electronic/Documents/projects/kip/TasksManager/client/src/components/NavDrawer/components/Filter.tsx":"45","/Users/electronic/Documents/projects/kip/TasksManager/client/src/components/SettingsPage/components/PasswordSettings.tsx":"46","/Users/electronic/Documents/projects/kip/TasksManager/client/src/components/StatisticsPage/components/DateStatistics.tsx":"47","/Users/electronic/Documents/projects/kip/TasksManager/client/src/components/StatisticsPage/components/PositionsStatistics.tsx":"48","/Users/electronic/Documents/projects/kip/TasksManager/client/src/components/StatisticsPage/components/LandscapeWarning.tsx":"49","/Users/electronic/Documents/projects/kip/TasksManager/client/src/components/StatisticsPage/components/PersonsStatistics.tsx":"50","/Users/electronic/Documents/projects/kip/TasksManager/client/src/components/Preloader/index.ts":"51","/Users/electronic/Documents/projects/kip/TasksManager/client/src/components/StatisticsPage/constants.ts":"52","/Users/electronic/Documents/projects/kip/TasksManager/client/src/components/shared/Message.tsx":"53","/Users/electronic/Documents/projects/kip/TasksManager/client/src/components/shared/InputFiles/PrevFileItem.tsx":"54","/Users/electronic/Documents/projects/kip/TasksManager/client/src/components/shared/Hooks.tsx":"55","/Users/electronic/Documents/projects/kip/TasksManager/client/src/components/StatisticsPage/components/CustomComponent.tsx":"56","/Users/electronic/Documents/projects/kip/TasksManager/client/src/components/TasksPage/components/FilesDialog.tsx":"57","/Users/electronic/Documents/projects/kip/TasksManager/client/src/components/Preloader/Preloader.tsx":"58","/Users/electronic/Documents/projects/kip/TasksManager/client/src/components/shared/InputFiles/index.ts":"59","/Users/electronic/Documents/projects/kip/TasksManager/client/src/components/TasksPage/components/FileItem.tsx":"60","/Users/electronic/Documents/projects/kip/TasksManager/client/src/components/shared/InputFiles/InputFiles.tsx":"61","/Users/electronic/Documents/projects/kip/TasksManager/client/src/utils/formatSize.ts":"62"},{"size":364,"mtime":1607254501568,"results":"63","hashOfConfig":"64"},{"size":345,"mtime":1606831906255,"results":"65","hashOfConfig":"64"},{"size":5295,"mtime":1594926991420,"results":"66","hashOfConfig":"64"},{"size":1563,"mtime":1608145799637,"results":"67","hashOfConfig":"64"},{"size":4101,"mtime":1608158773147,"results":"68","hashOfConfig":"64"},{"size":983,"mtime":1607324949616,"results":"69","hashOfConfig":"64"},{"size":2311,"mtime":1607330525183,"results":"70","hashOfConfig":"64"},{"size":1261,"mtime":1606844515363,"results":"71","hashOfConfig":"64"},{"size":421,"mtime":1608210806723,"results":"72","hashOfConfig":"64"},{"size":215,"mtime":1606415662669,"results":"73","hashOfConfig":"64"},{"size":40,"mtime":1595694973408,"results":"74","hashOfConfig":"64"},{"size":38,"mtime":1595102687736,"results":"75","hashOfConfig":"64"},{"size":41,"mtime":1606680458400,"results":"76","hashOfConfig":"64"},{"size":33,"mtime":1607179978749,"results":"77","hashOfConfig":"64"},{"size":43,"mtime":1607875972710,"results":"78","hashOfConfig":"64"},{"size":3668,"mtime":1608210886678,"results":"79","hashOfConfig":"64"},{"size":118,"mtime":1607267815123,"results":"80","hashOfConfig":"64"},{"size":699,"mtime":1607244740421,"results":"81","hashOfConfig":"64"},{"size":1128,"mtime":1608158808643,"results":"82","hashOfConfig":"64"},{"size":695,"mtime":1608155123183,"results":"83","hashOfConfig":"64"},{"size":956,"mtime":1607353376666,"results":"84","hashOfConfig":"64"},{"size":943,"mtime":1606844409333,"results":"85","hashOfConfig":"64"},{"size":613,"mtime":1608213047534,"results":"86","hashOfConfig":"64"},{"size":85,"mtime":1595030249447,"results":"87","hashOfConfig":"64"},{"size":1506,"mtime":1607891001442,"results":"88","hashOfConfig":"64"},{"size":3269,"mtime":1608218874702,"results":"89","hashOfConfig":"64"},{"size":4035,"mtime":1608212678844,"results":"90","hashOfConfig":"64"},{"size":4493,"mtime":1608219389019,"results":"91","hashOfConfig":"64"},{"size":10898,"mtime":1608237495459,"results":"92","hashOfConfig":"64"},{"size":4144,"mtime":1607331195184,"results":"93","hashOfConfig":"64"},{"size":2579,"mtime":1608217175512,"results":"94","hashOfConfig":"64"},{"size":5839,"mtime":1608206380271,"results":"95","hashOfConfig":"64"},{"size":951,"mtime":1607977668019,"results":"96","hashOfConfig":"64"},{"size":1358,"mtime":1608237552169,"results":"97","hashOfConfig":"64"},{"size":1289,"mtime":1608216982218,"results":"98","hashOfConfig":"64"},{"size":555,"mtime":1608210890108,"results":"99","hashOfConfig":"64"},{"size":2145,"mtime":1606844148142,"results":"100","hashOfConfig":"64"},{"size":4957,"mtime":1606844294807,"results":"101","hashOfConfig":"64"},{"size":4952,"mtime":1607875590639,"results":"102","hashOfConfig":"64"},{"size":11197,"mtime":1607891010950,"results":"103","hashOfConfig":"64"},{"size":2756,"mtime":1607708650757,"results":"104","hashOfConfig":"64"},{"size":1974,"mtime":1607334016201,"results":"105","hashOfConfig":"64"},{"size":403,"mtime":1606429120413,"results":"106","hashOfConfig":"64"},{"size":1871,"mtime":1608219737577,"results":"107","hashOfConfig":"64"},{"size":2675,"mtime":1607891028201,"results":"108","hashOfConfig":"64"},{"size":1863,"mtime":1607364328575,"results":"109","hashOfConfig":"64"},{"size":2410,"mtime":1608219112313,"results":"110","hashOfConfig":"64"},{"size":1645,"mtime":1608228599868,"results":"111","hashOfConfig":"64"},{"size":414,"mtime":1608217151887,"results":"112","hashOfConfig":"64"},{"size":1616,"mtime":1608228579321,"results":"113","hashOfConfig":"64"},{"size":61,"mtime":1607263695150,"results":"114","hashOfConfig":"64"},{"size":100,"mtime":1607939921938,"results":"115","hashOfConfig":"64"},{"size":1533,"mtime":1607851970311,"results":"116","hashOfConfig":"64"},{"size":1528,"mtime":1607807124602,"results":"117","hashOfConfig":"64"},{"size":339,"mtime":1608147795102,"results":"118","hashOfConfig":"64"},{"size":1047,"mtime":1607988512980,"results":"119","hashOfConfig":"64"},{"size":1101,"mtime":1607815270792,"results":"120","hashOfConfig":"64"},{"size":506,"mtime":1608158186349,"results":"121","hashOfConfig":"64"},{"size":39,"mtime":1607791380699,"results":"122","hashOfConfig":"64"},{"size":2590,"mtime":1607802324534,"results":"123","hashOfConfig":"64"},{"size":2252,"mtime":1607808356537,"results":"124","hashOfConfig":"64"},{"size":366,"mtime":1607772517366,"results":"125","hashOfConfig":"64"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},"o9g885",{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"135","usedDeprecatedRules":"128"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"140","usedDeprecatedRules":"128"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"143","usedDeprecatedRules":"128"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"166","usedDeprecatedRules":"128"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"169","usedDeprecatedRules":"128"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"172","usedDeprecatedRules":"128"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"175","usedDeprecatedRules":"128"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"178","usedDeprecatedRules":"128"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"181","usedDeprecatedRules":"128"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"188","usedDeprecatedRules":"128"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"191","usedDeprecatedRules":"128"},{"filePath":"192","messages":"193","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"194","usedDeprecatedRules":"128"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"197","usedDeprecatedRules":"128"},{"filePath":"198","messages":"199","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"200","usedDeprecatedRules":"128"},{"filePath":"201","messages":"202","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"203","usedDeprecatedRules":"128"},{"filePath":"204","messages":"205","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"206","messages":"207","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"208","usedDeprecatedRules":"128"},{"filePath":"209","messages":"210","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"211","messages":"212","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"213","messages":"214","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"215","messages":"216","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"217","messages":"218","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"219","messages":"220","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"221","usedDeprecatedRules":"128"},{"filePath":"222","messages":"223","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"224","usedDeprecatedRules":"128"},{"filePath":"225","messages":"226","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"227","messages":"228","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"229","messages":"230","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"231","messages":"232","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"233","usedDeprecatedRules":"128"},{"filePath":"234","messages":"235","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"236","usedDeprecatedRules":"128"},{"filePath":"237","messages":"238","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"239","messages":"240","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"241","usedDeprecatedRules":"128"},{"filePath":"242","messages":"243","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"244","usedDeprecatedRules":"128"},{"filePath":"245","messages":"246","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"247","usedDeprecatedRules":"128"},{"filePath":"248","messages":"249","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"250","usedDeprecatedRules":"128"},{"filePath":"251","messages":"252","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"253","messages":"254","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"255","messages":"256","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"257","messages":"258","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"259","usedDeprecatedRules":"128"},{"filePath":"260","messages":"261","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"262","usedDeprecatedRules":"128"},{"filePath":"263","messages":"264","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"265","messages":"266","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"267","messages":"268","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"269","messages":"270","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"271","messages":"272","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"273","usedDeprecatedRules":"128"},{"filePath":"274","messages":"275","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"276","usedDeprecatedRules":"128"},{"filePath":"277","messages":"278","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"279"},"/Users/electronic/Documents/projects/kip/TasksManager/client/src/index.tsx",[],["280","281"],"/Users/electronic/Documents/projects/kip/TasksManager/client/src/store.ts",[],"/Users/electronic/Documents/projects/kip/TasksManager/client/src/serviceWorker.ts",[],"/Users/electronic/Documents/projects/kip/TasksManager/client/src/components/App/App.tsx",["282","283","284"],"import React, { useEffect } from 'react'\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { auth } from '../../actions/authActions'\nimport TasksPage from '../TasksPage'\nimport NavDrawer from '../NavDrawer'\nimport PersonPage from '../PersonsPage'\nimport SettingsPage from '../SettingsPage'\nimport StatisticsPage from '../StatisticsPage'\nimport Auth from '../Auth'\nimport { getAllTasks } from 'src/actions/tasksActions'\nimport { getAllWorkshops } from 'src/actions/workshopsActions'\n\nimport \"./App.scss\"\nimport { getAllPersons } from 'src/actions/personsActions'\nimport { StoreType } from 'src/types/store'\n\nexport const App = () => {\n  const dispatch = useDispatch()\n\n  const { filterBy, searchQuery, limit } = useSelector(({ filter }: StoreType) => filter)\n  const { tasks, loading } = useSelector(({ tasks }: StoreType) => tasks)\n\n  useEffect(() => {\n    dispatch(auth())\n    dispatch(getAllTasks(limit))\n    dispatch(getAllWorkshops())\n    dispatch(getAllPersons())\n  }, [])\n\n  useEffect(() => {\n    if (!tasks?.length) return\n    dispatch(getAllTasks(limit, filterBy, searchQuery))\n  }, [filterBy, limit])\n\n  return (\n    <Router>\n      <NavDrawer />\n      <Switch>\n        <Route path='/persons' component={PersonPage} />\n        <Route path='/settings' component={SettingsPage} />\n        <Route path='/statistics' component={StatisticsPage} />\n        <Route path='/' exact component={TasksPage} />\n      </Switch>\n      <Auth />\n    </Router>\n  )\n}\n\nexport default App\n","/Users/electronic/Documents/projects/kip/TasksManager/client/src/actions/tasksActions.ts",[],"/Users/electronic/Documents/projects/kip/TasksManager/client/src/actions/workshopsActions.ts",["285","286"],"import api from '../api'\nimport { ActionType, GET_ALL_WORKSHOPS, REMOVE_PERSON, REMOVE_WORKSHOP, UPDATE_PERSON, UPDATE_WORKSHOP } from \"./actionTypes\"\nimport { WorkshopsType } from \"../types/global\"\nimport { Dispatch } from 'react'\nimport { StoreType } from '../types/store'\n\nexport const getAllWorkshops =\n  () => async (dispatch: Dispatch<ActionType>) => {\n    const workshops: WorkshopsType[] = await api.getAllWorkshops()\n    dispatch({\n      type: GET_ALL_WORKSHOPS,\n      payload: workshops\n    })\n  }\n\nexport const updateWorkshop =\n  (workshop: WorkshopsType) => (dispatch: Dispatch<ActionType>, getState: () => StoreType) => {\n    const { workshops: workshopsList } = getState()\n    const newWorkshopsList =\n      [...workshopsList.workshops.filter(item => item._id !== workshop._id), workshop]\n    dispatch({\n      type: UPDATE_WORKSHOP,\n      payload: newWorkshopsList,\n    })\n  }\n\nexport const removeWorkshop = (id: number) => ({\n  type: REMOVE_WORKSHOP,\n  payload: id\n})\n","/Users/electronic/Documents/projects/kip/TasksManager/client/src/actions/authActions.ts",["287","288"],"import api from '../api'\nimport { ActionType, AUTH_ERROR, LOADING_AUTH, LOADING_TASKS, LOGOUT, SET_USER } from \"./actionTypes\"\nimport { Dispatch } from 'react'\nimport { clearHash } from '../utils/location'\n\nexport const signUp =\n  (email: string, password: string, name: string) => async (dispatch: Dispatch<ActionType>) => {\n    dispatch({\n      type: LOADING_AUTH,\n      payload: true\n    })\n    const { data = {} } = await api.signUp(email, password, name)\n    const { token, errorMessage, user } = data\n\n    if (errorMessage) {\n      dispatch(setAuthError(errorMessage))\n      dispatch({\n        type: LOADING_AUTH,\n        payload: false\n      })\n    }\n    if (token && user) {\n      localStorage.setItem('token', token)\n      dispatch({\n        type: SET_USER,\n        payload: user\n      })\n      dispatch({\n        type: LOADING_AUTH,\n        payload: false\n      })\n      clearHash()\n    }\n  }\n\nexport const login = (email: string, password: string) =>\n  async (dispatch: Dispatch<ActionType>) => {\n    dispatch({\n      type: LOADING_AUTH,\n      payload: true\n    })\n    const { data = {} } = await api.login(email, password)\n    const { token, errorMessage, user } = data\n    if (errorMessage) {\n      dispatch(setAuthError(errorMessage))\n      dispatch({\n        type: LOADING_AUTH,\n        payload: false\n      })\n    }\n    if (token && user) {\n      localStorage.setItem('token', token)\n      dispatch({\n        type: SET_USER,\n        payload: user\n      })\n      dispatch({\n        type: LOADING_AUTH,\n        payload: false\n      })\n      clearHash()\n    }\n  }\n\nexport const auth = () => async (dispatch: Dispatch<ActionType>) => {\n    dispatch({\n      type: LOADING_AUTH,\n      payload: true\n    })\n    const { data = {}, error } = await api.auth()\n    const { token, user } = data\n    if (error) {\n      dispatch({\n        type: LOADING_AUTH,\n        payload: false\n      })\n    }\n    if (token && user) {\n      localStorage.setItem('token', token)\n      dispatch({\n        type: SET_USER,\n        payload: user\n      })\n    }\n    dispatch({\n      type: LOADING_AUTH,\n      payload: false\n    })\n  }\n\nexport const setAuthError = (error?: string) => ({\n  type: AUTH_ERROR,\n  payload: error || ''\n})\n\nexport const logOut = () => {\n  localStorage.removeItem('token')\n  window.location.reload()\n}\n","/Users/electronic/Documents/projects/kip/TasksManager/client/src/actions/personsActions.ts",[],"/Users/electronic/Documents/projects/kip/TasksManager/client/src/reducers/index.ts",[],"/Users/electronic/Documents/projects/kip/TasksManager/client/src/components/TasksPage/index.ts",[],"/Users/electronic/Documents/projects/kip/TasksManager/client/src/components/PersonsPage/index.ts",[],"/Users/electronic/Documents/projects/kip/TasksManager/client/src/components/NavDrawer/index.ts",[],"/Users/electronic/Documents/projects/kip/TasksManager/client/src/components/SettingsPage/index.ts",[],"/Users/electronic/Documents/projects/kip/TasksManager/client/src/components/Auth/index.ts",[],"/Users/electronic/Documents/projects/kip/TasksManager/client/src/components/StatisticsPage/index.ts",[],"/Users/electronic/Documents/projects/kip/TasksManager/client/src/actions/actionTypes.ts",[],"/Users/electronic/Documents/projects/kip/TasksManager/client/src/utils/location.ts",[],"/Users/electronic/Documents/projects/kip/TasksManager/client/src/reducers/workshops.ts",["289"],"import { WorkshopsStoreType } from '../types/store'\nimport { ActionType, GET_ALL_WORKSHOPS, REMOVE_WORKSHOP, UPDATE_WORKSHOP } from '../actions/actionTypes'\n\nconst initialState = {\n  workshops: [],\n}\n\nexport default (state: WorkshopsStoreType = initialState, action: ActionType) => {\n  switch (action.type) {\n    case GET_ALL_WORKSHOPS:\n      return {\n        ...state,\n        workshops: action.payload\n      }\n    case UPDATE_WORKSHOP:\n      return {\n        ...state,\n        workshops: action.payload,\n      }\n    case REMOVE_WORKSHOP:\n      return {\n        ...state,\n        workshops: state.workshops.filter(item => item._id !== action.payload),\n      }\n    default:\n      return state\n  }\n}\n","/Users/electronic/Documents/projects/kip/TasksManager/client/src/reducers/tasks.ts",["290"],"import {\n  LOADING_TASKS,\n  GET_ALL_TASKS,\n  ActionType,\n  UPDATE_TASK,\n  REMOVE_TASK,\n  SHOW_COMPLETED_MESSAGE,\n  SENDING_TASK\n} from '../actions/actionTypes'\nimport { TasksStoreType } from '../types/store'\n\nconst initialState: TasksStoreType = {\n  loading: false,\n  tasks: [],\n  isSendingTask: false,\n  showCompletedMessage: false,\n}\n\nexport default (state: TasksStoreType = initialState, action: ActionType) => {\n  switch (action.type) {\n    case GET_ALL_TASKS:\n      return {\n        ...state,\n        tasks: action.payload\n      }\n    case LOADING_TASKS:\n      return {\n        ...state,\n        loading: action.payload,\n      }\n    case UPDATE_TASK: {\n      return {\n        ...state,\n        tasks: action.payload\n      }\n    }\n    case REMOVE_TASK:\n      return {\n        ...state,\n        tasks: state.tasks.filter(item => item._id !== action.payload)\n      }\n    case SHOW_COMPLETED_MESSAGE:\n      return {\n        ...state,\n        showCompletedMessage: action.payload\n      }\n    case SENDING_TASK:\n      return {\n        ...state,\n        isSendingTask: action.payload\n      }\n    default:\n      return state\n  }\n}\n","/Users/electronic/Documents/projects/kip/TasksManager/client/src/reducers/filter.ts",["291"],"import { FilterStoreType } from '../types/store'\nimport { ActionType, SET_FILTER, SET_LIMIT, SET_QUERY } from '../actions/actionTypes'\n\nconst initialState: FilterStoreType = {\n  searchQuery: '',\n  filterBy: \"Все\",\n  limit: 50,\n}\n\nexport default (state: FilterStoreType = initialState, action: ActionType) => {\n  switch (action.type) {\n    case SET_QUERY:\n      return {\n        ...state,\n        searchQuery: action.payload\n      }\n    case SET_FILTER:\n      return {\n        ...state,\n        filterBy: action.payload\n      }\n      case SET_LIMIT:\n        return {\n          ...state,\n          limit: state.limit + (action.payload as number)\n        }\n    default:\n      return state\n  }\n}\n","/Users/electronic/Documents/projects/kip/TasksManager/client/src/reducers/user.ts",["292","293"],"import { ActionType, AUTH_ERROR, LOADING_AUTH, LOGOUT, SET_USER } from '../actions/actionTypes'\nimport { UserType } from '../types/global'\nimport { UserStoreType } from '../types/store'\n\n\nconst defaultState: UserStoreType = {\n  isGuest: true,\n  user: null,\n  loading: false,\n  error: '',\n  acces: 'read-only'\n}\n\nexport default (state = defaultState, action: ActionType) => {\n  switch (action.type) {\n    case SET_USER:\n      return {\n        ...state,\n        isGuest: false,\n        user: action.payload,\n        acces: (action.payload as UserType)?.acces || defaultState.acces\n      }\n    case LOGOUT:\n      return {\n        ...state,\n        isGuest: true,\n        user: null\n      }\n    case LOADING_AUTH:\n      return {\n        ...state,\n        loading: action.payload\n      }\n    case AUTH_ERROR:\n      return {\n        ...state,\n        error: action.payload\n      }\n    case LOGOUT:\n      return defaultState\n    default:\n      return state\n  }\n}\n","/Users/electronic/Documents/projects/kip/TasksManager/client/src/reducers/persons.ts",["294"],"import { PersonsStoreType } from '../types/store'\nimport { ActionType, ADD_NEW_PERSON, UPDATE_PERSON, GET_ALL_PERSONS, LOADING_PERSONS, REMOVE_PERSON } from '../actions/actionTypes'\n\nconst initialState = {\n  persons: [],\n  loading: true,\n}\n\nexport default (state: PersonsStoreType = initialState, action: ActionType) => {\n  switch (action.type) {\n    case GET_ALL_PERSONS:\n      return {\n        ...state,\n        persons: action.payload,\n      }\n    case LOADING_PERSONS:\n      return {\n        ...state,\n        loading: action.payload,\n      }\n    case ADD_NEW_PERSON:\n      return {\n        ...state,\n        persons: [...state.persons, action.payload],\n      }\n    case UPDATE_PERSON:\n      return {\n        ...state,\n        persons: action.payload,\n      }\n    case REMOVE_PERSON:\n      return {\n        ...state,\n        persons: state.persons.filter(item => item._id !== action.payload),\n      }\n    default:\n      return state\n  }\n}\n","/Users/electronic/Documents/projects/kip/TasksManager/client/src/reducers/statistics.ts",["295"],"import { ActionType, SET_STATISTICS, STATISTICS_LOADING } from '../actions/actionTypes'\nimport { StatisticsStoreType } from '../types/store'\n\nconst initialState: StatisticsStoreType = {\n  loading: false,\n  statistics: { positions: [], persons: [], date: [] },\n}\n\nexport default (state: StatisticsStoreType = initialState, action: ActionType) => {\n  switch (action.type) {\n    case SET_STATISTICS:\n      return {\n        ...state,\n        statistics: action.payload\n      }\n    case STATISTICS_LOADING:\n      return {\n        ...state,\n        loading: action.payload\n      }\n    default:\n      return state\n  }\n}\n","/Users/electronic/Documents/projects/kip/TasksManager/client/src/api/index.ts",[],"/Users/electronic/Documents/projects/kip/TasksManager/client/src/components/PersonsPage/PersonsPage.tsx",[],"/Users/electronic/Documents/projects/kip/TasksManager/client/src/components/TasksPage/TasksPageMobile.tsx",["296","297","298","299"],"import React, { Fragment, useEffect, useRef, useState } from 'react'\nimport _ from 'lodash'\nimport clsx from 'clsx'\nimport { useDispatch, useSelector } from 'react-redux'\nimport sortBy from '../../utils/sortBy'\nimport { FilterStoreType, StoreType, TasksStoreType } from '../../types/store'\nimport { TasksType } from '../../types/global'\nimport NewTasks from './components/NewTaskForm';\nimport { MiniPreloader } from '../Preloader';\nimport { formatTime } from '../../utils/formatTime';\nimport MobileTaskItem from './components/MobileTaskItem';\nimport { setLoading, setLimit } from 'src/actions/tasksActions'\n\nexport default function ControlledAccordions() {\n  const [isOpenAddForm, setIsOpenAddForm] = useState(false)\n  const [firstVisit, setFirstVisit] = useState(true)\n  const [currentScroll, setCurrentScroll] = useState(0)\n  const [changeTask, setChangeTask] =\n    useState<{ isOpen: boolean, task: TasksType | null }>({ isOpen: false, task: null })\n  const { acces } = useSelector(({ user }: StoreType) => user)\n  const { tasks, loading }: TasksStoreType = useSelector(({ tasks }: StoreType) => tasks)\n  const dispatch = useDispatch()\n  const pageRef = useRef<any>(null)\n  useEffect(() => {\n    if (!tasks.length) return\n    setCurrentScroll(pageRef?.current?.scrollHeight)\n    if (firstVisit) {\n      window.scrollTo(0, pageRef?.current?.scrollHeight)\n      return setFirstVisit(false)\n    }\n    window.scrollTo(0, pageRef?.current?.scrollHeight - currentScroll - 300)\n  }, [tasks.length])\n\n  useEffect(() => {\n    document.addEventListener('scroll', trackScrolling);\n    return () => {\n      document.removeEventListener('scroll', trackScrolling)\n    }\n  }, [])\n\n  const trackScrolling = () => {\n    if (window.pageYOffset === 0) {\n      setLoading(true)\n      dispatch(setLimit(100))\n    }\n  }\n\n  const openAddForm = () => setIsOpenAddForm(true)\n  const closeAddForm = () => setIsOpenAddForm(false)\n\n  const openEditForm = (task: TasksType) => setChangeTask({ isOpen: true, task })\n  const closeEditForm = () => setChangeTask({ isOpen: false, task: null })\n\n  const tasksList = _.orderBy(tasks, ['date'], ['asc'])\n\n  return (\n    <section\n      className={clsx(\n        'mobile-tasks-page', acces === 'read-only' && 'mobile-tasks-page_read-only'\n      )}\n      ref={pageRef}\n    >\n      {tasksList?.map((task, i, arr) => (\n        <Fragment key={task._id || i}>\n          {new Date(task.date).getDate() !== new Date(arr[i - 1]?.date).getDate() && (\n            <span className=\"mobile-tasks-page__date-title\">\n              {`${formatTime(new Date(task.date).getDate())} / ${formatTime(new Date(task.date).getMonth() + 1)} / ${new Date(task.date).getFullYear()}`}\n            </span>\n          )}\n          <MobileTaskItem\n            task={task}\n            openEditForm={openEditForm}\n          />\n        </Fragment>\n      ))}\n      {acces !== 'read-only' && (\n        <button\n          className='mobile-tasks-page__add-btn'\n          onClick={openAddForm}\n        >\n          Добавить новую задачу\n        </button>\n      )}\n      {isOpenAddForm && <NewTasks onClose={closeAddForm} />}\n      {changeTask.isOpen && <NewTasks onClose={closeEditForm} prevTask={changeTask.task} />}\n      {loading && <MiniPreloader />}\n    </section >\n  )\n}\n","/Users/electronic/Documents/projects/kip/TasksManager/client/src/components/TasksPage/TasksPageDesktop.tsx",["300"],"import React, { useEffect, useRef, useState } from 'react'\nimport _ from 'lodash'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { withStyles, Theme } from '@material-ui/core/styles'\nimport Table from '@material-ui/core/Table'\nimport TableBody from '@material-ui/core/TableBody'\nimport TableCell from '@material-ui/core/TableCell'\nimport TableContainer from '@material-ui/core/TableContainer'\nimport TableHead from '@material-ui/core/TableHead'\nimport TableRow from '@material-ui/core/TableRow'\nimport { MiniPreloader } from '../Preloader'\nimport { StoreType, TasksStoreType } from '../../types/store'\nimport { TasksType } from '../../types/global'\nimport AddNewTasks from './components/NewTaskForm'\nimport { setLimit, setLoading } from '../../actions/tasksActions'\n\nimport './TasksPage.scss'\nimport DesktopTaskItem from './components/DesktopTaskItem'\n\nconst StyledTableCell = withStyles((theme: Theme) => ({\n  head: {\n    fontSize: 14,\n    padding: '10px 5px',\n    position: 'sticky',\n    top: 0,\n    backgroundColor: '#fff',\n  },\n  body: {\n    fontSize: 14,\n    padding: '5px 15px 5px 5px',\n  },\n}))(TableCell)\n\nconst TasksPageDesktop = () => {\n  const dispatch = useDispatch()\n  const [isOpenAddForm, setIsOpenAddForm] = useState(false)\n  const [changeTask, setChangeTask] =\n    useState<{ isOpen: boolean, task: TasksType | null }>({ isOpen: false, task: null })\n  const { tasks, loading }: TasksStoreType = useSelector(({ tasks }: StoreType) => tasks)\n  const { acces } = useSelector(({ user }: StoreType) => user)\n  const pageRef = useRef<any>(null)\n\n  useEffect(() => {\n    document.addEventListener('scroll', trackScrolling);\n    return () => {\n      document.removeEventListener('scroll', trackScrolling)\n    }\n  }, [])\n\n  const trackScrolling = () => {\n    const element = pageRef.current\n    const scrollToBottom = window.pageYOffset + document.documentElement.clientHeight\n    if (element.scrollHeight - scrollToBottom < 200) {\n      setLoading(true)\n      dispatch(setLimit(100))\n    }\n  }\n\n  const openAddForm = () => setIsOpenAddForm(true)\n  const closeAddForm = () => setIsOpenAddForm(false)\n\n  const openEditForm = (task: TasksType) => setChangeTask({ isOpen: true, task })\n  const closeEditForm = () => setChangeTask({ isOpen: false, task: null })\n\n  const tasksList = _.orderBy(tasks, ['date'], ['desc'])\n\n  return (\n    <section className='page desktop-tasks-page' ref={pageRef}>\n      <TableContainer style={{ height: '100%' }}>\n        <Table stickyHeader aria-label=\"customized table\">\n          <TableHead>\n            <TableRow>\n              <StyledTableCell style={{ width: '18%' }} align=\"left\">\n                Время\n              </StyledTableCell>\n              <StyledTableCell style={{ width: '20%' }} align=\"left\">\n                Ф.И.О. работников\n              </StyledTableCell>\n              <StyledTableCell style={{ width: '22%' }} align=\"left\">\n                Цех\n              </StyledTableCell>\n              <StyledTableCell style={{ width: '20%' }} align=\"left\">\n                Проблема\n              </StyledTableCell>\n              <StyledTableCell style={{ width: '20%' }} align=\"left\">\n                Решение\n              </StyledTableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {tasksList?.map((task, i) => (\n              <DesktopTaskItem\n                key={task._id || i}\n                task={task}\n                openEditForm={openEditForm}\n              />\n            ))}\n          </TableBody>\n        </Table>\n      </TableContainer>\n      {acces !== 'read-only' && (\n        <button className='desktop-tasks-page__add-btn' onClick={openAddForm}>\n          Добавить новую задачу\n        </button>\n      )}\n      {isOpenAddForm && <AddNewTasks onClose={closeAddForm} />}\n      {changeTask.isOpen && <AddNewTasks onClose={closeEditForm} prevTask={changeTask.task} />}\n      {loading && <MiniPreloader />}\n    </section>\n  )\n}\n\nexport default TasksPageDesktop\n","/Users/electronic/Documents/projects/kip/TasksManager/client/src/components/NavDrawer/NavDrawer.tsx",["301","302","303"],"import React, { useEffect, useState } from 'react'\nimport { Link, withRouter, RouteComponentProps, useHistory } from 'react-router-dom'\nimport { useSelector } from 'react-redux'\nimport clsx from 'clsx'\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles'\nimport Drawer from '@material-ui/core/Drawer'\nimport List from '@material-ui/core/List'\nimport ListItem from '@material-ui/core/ListItem'\nimport ListItemIcon from '@material-ui/core/ListItemIcon'\nimport ListItemText from '@material-ui/core/ListItemText'\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle'\nimport ReceiptIcon from '@material-ui/icons/Receipt'\nimport EqualizerIcon from '@material-ui/icons/Equalizer';\nimport PeopleAltIcon from '@material-ui/icons/PeopleAlt'\nimport SettingsIcon from '@material-ui/icons/Settings'\nimport Filter from './components/Filter'\nimport Search from './components/Search'\nimport { isMobileOnly } from 'react-device-detect'\nimport FixedBtn from './components/FixedBtn'\nimport AssessmentIcon from '@material-ui/icons/Assessment';\nimport { StoreType } from '../../types/store'\n\nimport './NavDrawer.scss'\nimport Acces from './components/Acces'\n\nconst useStyles = makeStyles((theme: Theme) =>\n\tcreateStyles({\n\t\troot: {\n\t\t\tdisplay: 'flex',\n\t\t},\n\t\tdrawer: {\n\t\t\twidth: 260,\n\t\t\tflexShrink: 0,\n\t\t\twhiteSpace: 'nowrap',\n\t\t},\n\t\tdrawerOpen: {\n\t\t\twidth: 260,\n\t\t\tleft: 'auto',\n\t\t\toverflowX: 'hidden',\n\t\t\ttransition: theme.transitions.create('all', {\n\t\t\t\teasing: theme.transitions.easing.sharp,\n\t\t\t\tduration: theme.transitions.duration.enteringScreen,\n\t\t\t}),\n\t\t},\n\t\tdrawerClose: {\n\t\t\ttransition: theme.transitions.create('all', {\n\t\t\t\teasing: theme.transitions.easing.sharp,\n\t\t\t\tduration: theme.transitions.duration.leavingScreen,\n\t\t\t}),\n\t\t\twidth: 60,\n\t\t\toverflowX: 'hidden',\n\t\t\tleft: isMobileOnly ? -60 : 'auto',\n\t\t},\n\t\tusername: {\n\t\t\tmarginBottom: 30,\n\t\t}\n\t}),\n)\n\nconst NavDrawer = ({ location }: RouteComponentProps) => {\n\tconst history = useHistory()\n\tconst classes = useStyles()\n\tconst { isGuest } = useSelector(({ user }: StoreType) => user)\n\n\tconst [open, setOpen] = useState(false)\n\tconst [activeLink, setActiveLink] = useState('completed')\n\n\tuseEffect(() => {\n\t\tswitch (location.pathname) {\n\t\t\tcase '/':\n\t\t\t\treturn setActiveLink('completed')\n\t\t\tcase '/statistics':\n\t\t\t\treturn setActiveLink('statistics')\n\t\t\tcase '/persons':\n\t\t\t\treturn setActiveLink('persons')\n\t\t\tcase '/settings':\n\t\t\t\treturn setActiveLink('settings')\n\t\t\tdefault:\n\t\t\t\treturn history.push('/')\n\t\t}\n\t}, [location.pathname])\n\n\tconst isOpenHandler = () => {\n\t\tsetOpen(!open)\n\t}\n\n\tconst checkActiveLink = (link: string): 'inherit' | 'error' => (\n\t\tlink === activeLink ? 'error' : 'inherit'\n\t)\n\n\treturn (\n\t\t<nav\n\t\t\tclassName={clsx('nav-drawer', classes.root)}\n\t\t\tonMouseEnter={() => setOpen(true)}\n\t\t\tonMouseLeave={() => setOpen(false)}\n\t\t>\n\t\t\t<Drawer\n\t\t\t\tvariant=\"permanent\"\n\t\t\t\tclassName={clsx(classes.drawer, {\n\t\t\t\t\t[classes.drawerOpen]: open,\n\t\t\t\t\t[classes.drawerClose]: !open,\n\t\t\t\t})}\n\t\t\t\tclasses={{\n\t\t\t\t\tpaper: clsx({\n\t\t\t\t\t\t[classes.drawerOpen]: open,\n\t\t\t\t\t\t[classes.drawerClose]: !open,\n\t\t\t\t\t}),\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\t<List>\n\t\t\t\t\t<Link to='/'>\n\t\t\t\t\t\t<ListItem button>\n\t\t\t\t\t\t\t<ListItemIcon>\n\t\t\t\t\t\t\t\t<CheckCircleIcon\n\t\t\t\t\t\t\t\t\tcolor={checkActiveLink('completed')}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</ListItemIcon>\n\t\t\t\t\t\t\t<ListItemText primary={'Выполненные задачи'} />\n\t\t\t\t\t\t</ListItem>\n\t\t\t\t\t</Link>\n\t\t\t\t\t<Link to='/statistics'>\n\t\t\t\t\t\t<ListItem button >\n\t\t\t\t\t\t\t<ListItemIcon>\n\t\t\t\t\t\t\t\t<EqualizerIcon\n\t\t\t\t\t\t\t\t\tstyle={{transform: 'scale(1.1)'}}\n\t\t\t\t\t\t\t\t\tcolor={checkActiveLink('statistics')}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</ListItemIcon>\n\t\t\t\t\t\t\t<ListItemText primary={'Статистика'} />\n\t\t\t\t\t\t</ListItem>\n\t\t\t\t\t</Link>\n\t\t\t\t\t<Link to='/persons'>\n\t\t\t\t\t\t<ListItem button >\n\t\t\t\t\t\t\t<ListItemIcon>\n\t\t\t\t\t\t\t\t<PeopleAltIcon\n\t\t\t\t\t\t\t\t\tcolor={checkActiveLink('persons')}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</ListItemIcon>\n\t\t\t\t\t\t\t<ListItemText primary={'Персонал КИПиСА'} />\n\t\t\t\t\t\t</ListItem>\n\t\t\t\t\t</Link>\n\t\t\t\t</List>\n\t\t\t\t<Search />\n\t\t\t\t<Filter isOpen={open} />\n\t\t\t\t<List>\n\t\t\t\t\t{!isGuest && (\n\t\t\t\t\t\t<Link to='/settings'>\n\t\t\t\t\t\t\t<ListItem button>\n\t\t\t\t\t\t\t\t<ListItemIcon>\n\t\t\t\t\t\t\t\t\t<SettingsIcon\n\t\t\t\t\t\t\t\t\t\tcolor={checkActiveLink('settings')}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t</ListItemIcon>\n\t\t\t\t\t\t\t\t<ListItemText primary={'Настройки'} />\n\t\t\t\t\t\t\t</ListItem>\n\t\t\t\t\t\t</Link>\n\t\t\t\t\t)}\n\t\t\t\t\t<Acces />\n\t\t\t\t</List>\n\t\t\t</Drawer>\n\t\t\t{isMobileOnly && <FixedBtn isOpenHandler={isOpenHandler} isOpen={open} />}\n\t\t</nav>\n\t)\n}\n\nexport default withRouter(NavDrawer)\n","/Users/electronic/Documents/projects/kip/TasksManager/client/src/components/SettingsPage/SettingsPage.tsx",["304"],"import React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from \"react-redux\";\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem'\nimport ListItemText from '@material-ui/core/ListItemText'\nimport { UserType, WorkshopsType } from '../../types/global'\nimport { StoreType } from '../../types/store'\nimport api from '../../api'\nimport { getAllWorkshops } from '../../actions/workshopsActions'\nimport { isMobileOnly } from 'react-device-detect'\nimport { Box, Checkbox, Container, Grid, Icon, IconButton, ListItemSecondaryAction, Paper, Tooltip, Typography } from '@material-ui/core'\nimport InputBase from '@material-ui/core/InputBase'\nimport Divider from '@material-ui/core/Divider'\nimport DeleteIcon from '@material-ui/icons/Delete'\nimport PasswordSettings from './components/PasswordSettings';\nimport useStyles from './styles';\nimport SearchOutlinedIcon from '@material-ui/icons/SearchOutlined'\nimport RemoveRedEyeIcon from '@material-ui/icons/RemoveRedEye'\nimport BrightnessAutoIcon from '@material-ui/icons/BrightnessAuto';\nimport BuildIcon from '@material-ui/icons/Build';\n\nconst SettingsPage = () => {\n  const classes = useStyles()\n  const dispatch = useDispatch()\n  const { acces } = useSelector(({ user }: StoreType) => user)\n  const [isOpenPasswordInput, setOpenPasswordInput] = useState(acces !== 'admin')\n  const workshopsList = useSelector(({ workshops }: StoreType) => workshops.workshops)\n  const [newObject, setNewObject] =\n    useState<{ workshop?: number | null, object: string }>({ workshop: 0, object: '' })\n  const [workShopsName, setWorkShopsName] = useState('')\n  const [loading, setLoading] = useState(false)\n\n  const [allUsers, setUsers] = useState<UserType[]>([])\n\n  useEffect(() => {\n    !workshopsList && dispatch(getAllWorkshops())\n    getAllUsers()\n  }, [])\n\n  const getAllUsers = async () => {\n    const users = await api.getAllUsers()\n    users && setUsers(users)\n  }\n\n  const addNewWorkshop = async () => {\n    if (workShopsName && workShopsName.length > 3 && !loading) {\n      setLoading(true)\n      const { workshop } = await api.addNewWorkshops({ name: workShopsName, object: [] })\n      if (workshop) dispatch(getAllWorkshops())\n      setLoading(false)\n    }\n  }\n\n  const deletedPosition = async (id?: string | number | null) => {\n    if (loading && !id) return\n    setLoading(true)\n    await api.deleteItem(id, 'workshops')\n    setLoading(false)\n  }\n\n  const deletedObject = async (workshop: WorkshopsType, i: number) => {\n    if (loading) return\n    setLoading(true)\n    const newWorkShop = workshop.object.filter((_: any, id: any) => id !== i);\n    await api.updateData(\"workshops\", workshop._id, { object: newWorkShop })\n    dispatch(getAllWorkshops())\n    setLoading(false)\n  }\n\n  const addNewObject = async (workshop: WorkshopsType) => {\n    if (workshop._id === newObject.workshop && newObject.object && !loading) {\n      setLoading(true)\n      const newObjectList = [...workshop.object, newObject.object]\n      await api.updateData(\"workshops\", workshop._id, { object: newObjectList })\n      setNewObject({ object: '', workshop: null })\n      dispatch(getAllWorkshops())\n      setLoading(false)\n    }\n  }\n\n  const toggleChecked = async (id: string, acces: 'read-only' | 'standard' | 'admin') => {\n    const idx = allUsers.findIndex((el) => el._id === id)\n    if (loading || allUsers[idx].acces === acces) return\n    setLoading(true)\n    const { body } = await api.updateData('settings/users', id, { acces })\n    const newUsersList = [...allUsers]\n    newUsersList[idx] = body\n    setUsers(newUsersList)\n    setLoading(false)\n  }\n\n  return (\n    <Box component='section' className={isMobileOnly ? 'mobile-page' : 'page'}>\n      {isOpenPasswordInput ? <PasswordSettings onClose={() => setOpenPasswordInput(false)} /> : (\n        <Container maxWidth='md'>\n          <Grid container spacing={6} className={classes.container}>\n            <Grid item xs={12} md={6} className={classes.gridContainer}>\n              <Paper component=\"form\" className={classes.root}>\n                <InputBase\n                  className={classes.input}\n                  placeholder=\"Добавить новый цех\"\n                  onChange={e => setWorkShopsName(e.target.value)}\n                  value={workShopsName}\n                />\n                <Divider className={classes.divider} orientation=\"vertical\" />\n                <IconButton\n                  color=\"primary\"\n                  className={classes.iconButton}\n                  aria-label=\"directions\"\n                  onClick={addNewWorkshop}\n                >\n                  <Icon color=\"primary\">add_circle</Icon>\n                </IconButton>\n              </Paper>\n              <Typography variant='h5' component='h4'>\n                Список объектов\n              </Typography>\n              {(workshopsList as WorkshopsType[]).map((workshop, i) => (\n                <List key={workshop._id || i}>\n                  <ListItem>\n                    <Typography variant=\"h6\">\n                      {workshop.name}\n                    </Typography>\n                    <ListItemSecondaryAction>\n                      <IconButton\n                        edge='end'\n                        aria-label=\"delete\"\n                        onClick={() => deletedPosition(workshop._id)}\n                      >\n                        <DeleteIcon />\n                      </IconButton>\n                    </ListItemSecondaryAction>\n                  </ListItem>\n                  <List>\n                    {workshop.object.map((item, i) => (\n                      <ListItem key={i}>\n                        <ListItemText\n                          primary={item}\n                        />\n                        <ListItemSecondaryAction>\n                          <IconButton\n                            edge=\"end\"\n                            aria-label=\"delete\"\n                            onClick={() => deletedObject(workshop, i)}>\n                            <DeleteIcon />\n                          </IconButton>\n                        </ListItemSecondaryAction>\n                      </ListItem>\n                    ))}\n                  </List>\n                  <Paper component=\"form\" className={classes.root}>\n                    <InputBase\n                      className={classes.input}\n                      placeholder=\"Добавить новый объект\"\n                      value={newObject.workshop === workshop._id ? newObject.object : ''}\n                      onChange={e => setNewObject({ object: e.target.value, workshop: workshop._id })}\n                    />\n                    <Divider className={classes.divider} orientation=\"vertical\" />\n                    <IconButton\n                      color=\"primary\"\n                      className={classes.iconButton}\n                      aria-label=\"directions\"\n                      onClick={() => addNewObject(workshop)}\n                    >\n                      <Icon color=\"primary\">add_circle</Icon>\n                    </IconButton>\n                  </Paper>\n                </List>\n              ))}\n            </Grid>\n            <Grid item xs={12} md={6} className={classes.gridContainer}>\n              <Paper component=\"form\" className={classes.root}>\n                <InputBase\n                  className={classes.input}\n                  placeholder=\"Найти пользователя\"\n                  onChange={e => setWorkShopsName(e.target.value)}\n                  value={workShopsName}\n                />\n                <Divider className={classes.divider} orientation=\"vertical\" />\n                <IconButton\n                  color=\"primary\"\n                  className={classes.iconButton}\n                  aria-label=\"directions\"\n                  onClick={addNewWorkshop}\n                >\n                  <SearchOutlinedIcon />\n                </IconButton>\n              </Paper>\n              <Typography variant='h5' component='h4'>\n                Список пользователей\n                <ListItemSecondaryAction className={classes.iconsContainer}>\n                  <Tooltip title=\"Только чтение, запрещено редактировать, добавлять и удалять данные\" placement=\"top\">\n                    <RemoveRedEyeIcon style={{ transform: 'scale(1.1)' }} className={classes.statusIcon} />\n                  </Tooltip>\n                  <Tooltip title=\"Стандартные права, разрешено редактировать, добавлять и удалять любые данные. Огранниченный доступ к настройкам приложения\" placement=\"top\">\n                    <BuildIcon className={classes.statusIcon}/>\n                  </Tooltip>\n                  <Tooltip title=\"Права администратора, полный доступ ко всем возможностям приложения\" placement=\"top\">\n                    <BrightnessAutoIcon className={classes.statusIcon}/>\n                  </Tooltip>\n                </ListItemSecondaryAction>\n              </Typography>\n              <List dense className={classes.list}>\n                {!!allUsers.length && allUsers.map(({ _id, name, email, acces }) => {\n                  const labelId = `checkbox-list-secondary-label-${email}`\n                  return (\n                    <ListItem key={_id} button>\n                      <ListItemText\n                        id={labelId}\n                        primary={`${email} (${name})`}\n                        className={classes.userText}\n                      />\n                      <ListItemSecondaryAction>\n                        <Checkbox\n                          edge=\"end\"\n                          checked={acces === 'read-only'}\n                          onChange={() => toggleChecked(_id, 'read-only')}\n                          inputProps={{ 'aria-labelledby': labelId }}\n                        />\n                        <Checkbox\n                          edge=\"end\"\n                          checked={acces === 'standard'}\n                          onChange={() => toggleChecked(_id, 'standard')}\n                          inputProps={{ 'aria-labelledby': labelId }}\n                        />\n                        <Checkbox\n                          edge=\"end\"\n                          checked={acces === 'admin'}\n                          onChange={() => toggleChecked(_id, 'admin')}\n                          inputProps={{ 'aria-labelledby': labelId }}\n                        />\n                      </ListItemSecondaryAction>\n                    </ListItem>\n                  )\n                })}\n              </List>\n            </Grid>\n          </Grid>\n        </Container>\n      )}\n    </Box>\n  )\n}\n\nexport default SettingsPage\n","/Users/electronic/Documents/projects/kip/TasksManager/client/src/components/Auth/Auth.tsx",["305","306"],"import React, { useEffect, useState } from 'react'\nimport { RouteComponentProps, withRouter } from 'react-router-dom'\nimport Button from '@material-ui/core/Button'\nimport TextField from '@material-ui/core/TextField'\nimport Dialog from '@material-ui/core/Dialog'\nimport DialogActions from '@material-ui/core/DialogActions'\nimport DialogContent from '@material-ui/core/DialogContent'\nimport DialogTitle from '@material-ui/core/DialogTitle'\nimport { Breadcrumbs, Typography } from '@material-ui/core'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { setAuthError, login, signUp } from '../../actions/authActions'\nimport { clearHash } from '../../utils/location'\nimport { StoreType } from '../../types/store'\n\nconst Auth = ({ location }: RouteComponentProps) => {\n  const [open, setOpen] = useState(location.hash === '#auth')\n  const [authType, setAuthType] = useState<'login' | 'signup'>('login')\n  const [email, setEmail] = useState('')\n  const [name, setName] = useState('')\n  const [password, setPassword] = useState('')\n  const { isGuest, error, loading } = useSelector(({ user }: StoreType) => user)\n  const dispatch = useDispatch()\n\n  useEffect(() => {\n    (location.hash === '#auth' && isGuest) ? setOpen(true) : setOpen(false)\n    setEmail('')\n    setPassword('')\n  }, [location.hash, authType])\n\n  useEffect(() => {\n    error && dispatch(setAuthError())\n  }, [password, email, authType])\n\n  const onSubmit = async () => {\n    switch (authType) {\n      case 'login':\n        if (email.length < 6 || password.length < 6) {\n          dispatch(setAuthError('Введите корректные данные'))\n          break\n        }\n        dispatch(login(email, password))\n        break\n      case 'signup':\n        if (email.length < 6 || password.length < 6 || name.length < 4) {\n          dispatch(setAuthError('Введите корректные данные'))\n          break\n        }\n        dispatch(signUp(email, password, name))\n        break\n    }\n  }\n\n  return (\n    <Dialog open={open} onClose={clearHash} aria-labelledby=\"form-dialog-title\" maxWidth='xs'>\n      <DialogTitle id=\"form-dialog-title\">\n        <Breadcrumbs aria-label=\"breadcrumb\">\n          <Typography\n            style={{ cursor: 'pointer' }}\n            variant='h6' color={authType === 'login' ? 'textPrimary' : 'inherit'}\n            onClick={() => setAuthType('login')}\n          >\n            Войти\n            </Typography>\n          <Typography\n            style={{ cursor: 'pointer' }}\n            variant=\"h6\" color={authType === 'signup' ? 'textPrimary' : 'inherit'}\n            onClick={() => setAuthType('signup')}\n          >\n            Регистрация\n            </Typography>\n        </Breadcrumbs>\n      </DialogTitle>\n      <DialogContent>\n        {error && (\n          <Typography variant=\"subtitle1\" color='error'>\n            {error}\n          </Typography>\n        )}\n        <TextField\n          autoFocus\n          error={!!error}\n          margin=\"dense\"\n          id=\"email\"\n          label=\"Введите почту или телефон\"\n          type=\"email\"\n          fullWidth\n          value={email}\n          onChange={e => setEmail(e.target.value)}\n        />\n        {authType === 'signup' && (<TextField\n          error={!!error}\n          margin=\"dense\"\n          id=\"name\"\n          label=\"Идентификатор (фамилия и имя)\"\n          type=\"name\"\n          fullWidth\n          value={name}\n          onChange={e => setName(e.target.value)}\n        />)}\n        <TextField\n          error={!!error}\n          margin=\"dense\"\n          id=\"mail\"\n          label=\"Пароль\"\n          type=\"password\"\n          fullWidth\n          value={password}\n          onChange={e => setPassword(e.target.value)}\n        />\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={clearHash} color=\"primary\">\n          Отменить\n          </Button>\n        <Button onClick={onSubmit} color=\"primary\" disabled={!!error || loading}>\n          Подтвердить\n          </Button>\n      </DialogActions>\n    </Dialog>\n  )\n}\n\nexport default withRouter(Auth)\n","/Users/electronic/Documents/projects/kip/TasksManager/client/src/components/StatisticsPage/StatisticsPage.tsx",["307","308","309","310"],"import React, { useEffect, useState } from 'react'\nimport PositionStatistics from './components/PositionsStatistics'\nimport DatePicker from \"react-datepicker\";\nimport { Grid, Typography, Container, Backdrop, CircularProgress } from '@material-ui/core';\nimport useStyles from './styles';\nimport TimeStatistics from './components/PersonsStatistics';\nimport DateStatistics from './components/DateStatistics';\nimport { isMobileOnly, withOrientationChange } from 'react-device-detect'\nimport { getStatistics } from 'src/actions/statisticsActions'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { StoreType } from 'src/types/store'\nimport { MiniPreloader } from '../Preloader'\nimport RotateIcon from './images/phone-rotation.svg'\nimport LandscapeWarning from './components/LandscapeWarning';\n\ntype Props = { isLandscape: boolean }\n\nconst minDate = new Date()\nconst maxDate = new Date()\n\nconst StatisticsPage = ({ isLandscape }: Props) => {\n  const classes = useStyles()\n  const dispatch = useDispatch()\n  const [firstDate, setFirstDate] =\n    useState(new Date(minDate.setMonth(minDate.getMonth() - 1)))\n  const [lastDate, setLastDate] = useState(maxDate)\n  const { loading } = useSelector(({ statistics }: StoreType) => statistics)\n\n  useEffect(() => {\n    dispatch(getStatistics(firstDate, lastDate))\n  }, [firstDate, lastDate])\n\n  if (!isLandscape && isMobileOnly) return <LandscapeWarning />\n  return (\n    <section className={isMobileOnly ? 'mobile-page' : 'page'}>\n      {!isLandscape && isMobileOnly && <LandscapeWarning />}\n      {loading && <MiniPreloader />}\n      <Container maxWidth='lg'>\n        <Grid container className={classes.container}>\n          <Grid className={classes.title}>\n            <Typography variant='h5' >\n              Статистика вызовов за период\n             <DatePicker\n                selected={firstDate}\n                onChange={(date: Date) => setFirstDate(date)}\n                locale='ru'\n                dateFormat='dd.MM.yyyy'\n                className={classes.dataPicker}\n              />{'до'}\n              <DatePicker\n                selected={lastDate}\n                onChange={(date: Date) => setLastDate(date)}\n                locale='ru'\n                dateFormat='dd.MM.yyyy'\n                className={classes.dataPicker}\n              />\n            </Typography>\n          </Grid>\n          <PositionStatistics />\n          <TimeStatistics />\n          <DateStatistics />\n        </Grid>\n      </Container>\n    </section>\n  )\n}\n\nexport default withOrientationChange(StatisticsPage)\n","/Users/electronic/Documents/projects/kip/TasksManager/client/src/api/serverApi.ts",[],"/Users/electronic/Documents/projects/kip/TasksManager/client/src/utils/formatTime.ts",["311"],"const days = [\"Воскресенье\", \"Понедельник\", \"Вторник\", \"Среда\", \"Четверг\", \"Пятница\", \"Суббота\"]\nconst months = [\"Январь\", \"Февраль\", \"Март\", \"Апрель\", \"Май\", \"Июнь\",\n  \"Июль\", \"Август\", \"Сентябрь\", \"Октябрь\", \"Ноябрь\", \"Декабрь\"]\n\nexport const formatTime = (time: number): string => {\n  if (time < 10) {\n    return \"0\" + time\n  }\n  else return '' + time\n}\n\nexport const getTimeWork = (start: Date, finish: Date) => {\n  const timeStart = `${formatTime(new Date(start).getHours())}:${formatTime(new Date(start).getMinutes())}`\n  const timeFinish = `${formatTime(new Date(finish).getHours())}:${formatTime(new Date(finish).getMinutes())}`\n  return `${timeStart} - ${timeFinish}`\n}\n\nexport const formatDataMonths = (date: Date) => {\n  const myDate = new Date(date)\n  return `${months[myDate.getMonth()]} ${myDate.getFullYear()}`\n}\n","/Users/electronic/Documents/projects/kip/TasksManager/client/src/components/SettingsPage/styles.ts",[],"/Users/electronic/Documents/projects/kip/TasksManager/client/src/components/StatisticsPage/styles.ts",[],"/Users/electronic/Documents/projects/kip/TasksManager/client/src/actions/statisticsActions.ts",[],"/Users/electronic/Documents/projects/kip/TasksManager/client/src/components/PersonsPage/PersonItem.tsx",[],"/Users/electronic/Documents/projects/kip/TasksManager/client/src/components/PersonsPage/NewPerson.tsx",[],"/Users/electronic/Documents/projects/kip/TasksManager/client/src/components/TasksPage/components/DesktopTaskItem.tsx",["312","313"],"import React, { useEffect, useRef, useState } from 'react'\nimport clsx from 'clsx'\nimport _ from 'lodash'\nimport { withStyles, Theme } from '@material-ui/core/styles'\nimport TableCell from '@material-ui/core/TableCell'\nimport TableRow from '@material-ui/core/TableRow'\nimport { TaskFile, TasksType } from '../../../types/global'\nimport { formatTime } from '../../../utils/formatTime'\nimport { Button, ButtonGroup } from '@material-ui/core'\nimport api from '../../../api'\nimport { removeTask } from '../../../actions/tasksActions'\nimport { useDispatch, useSelector } from 'react-redux'\nimport ErrorOutlineIcon from '@material-ui/icons/ErrorOutline'\nimport DeleteForeverIcon from '@material-ui/icons/DeleteForever'\nimport { StoreType } from '../../../types/store'\nimport FilesDialog from './FilesDialog'\nimport EditIcon from '@material-ui/icons/Edit'\n\ntype Props = {\n  task: TasksType\n  openEditForm: (task: TasksType) => void\n}\n\nconst StyledTableCell = withStyles((theme: Theme) => ({\n  head: {\n    fontSize: 14,\n    padding: '10px 5px',\n    position: 'sticky',\n    top: 0,\n    backgroundColor: '#fff',\n  },\n  body: {\n    fontSize: 14,\n    padding: '5px 15px 5px 5px',\n  },\n}))(TableCell)\n\nconst StyledTableRow = withStyles((theme: Theme) => ({\n  root: {\n    height: '100%',\n    '&:nth-of-type(odd)': {\n      backgroundColor: 'rgba(231, 231, 231, .3)',\n    },\n    '&:hover': {\n      backgroundColor: '#d4f7ff',\n    },\n  },\n}))(TableRow)\n\nconst DesktopTaskItem = ({ task, openEditForm }: Props) => {\n  const [showChangePanel, setShowChangePanel] = useState(false)\n  const [checked, setChecked] = useState(task.mark || false)\n  const { acces } = useSelector(({ user }: StoreType) => user)\n  const thisRef = useRef<any>(null)\n  const dispatch = useDispatch()\n\n  useEffect(() => {\n    return () => {\n      document.removeEventListener('click', handleOuterClick)\n      document.removeEventListener('mouseover', handleOuterClick)\n    }\n  }, [])\n\n  const removeItem = async () => {\n    task._id && dispatch(removeTask(task._id))\n  }\n\n  const handleOuterClick = (event: { target: any }) => {\n    if (!thisRef?.current?.contains(event.target)) {\n      closeChangePanel()\n    }\n  }\n\n  const openChangePanel = () => {\n    if (acces === 'read-only') return\n    setShowChangePanel(true)\n    document.addEventListener('click', handleOuterClick)\n    document.addEventListener('mouseover', handleOuterClick)\n  }\n  const closeChangePanel = () => {\n    setShowChangePanel(false)\n    document.removeEventListener('click', handleOuterClick)\n    document.removeEventListener('mouseover', handleOuterClick)\n  }\n\n  const toggleChecked = async () => {\n    const { body } = await api.updateData('tasks', task._id, { mark: !checked })\n    body && setChecked(body.mark)\n  }\n\n  return (\n    <StyledTableRow\n      ref={thisRef}\n      onClick={openChangePanel}\n      className={clsx(\n        'desktop-tasks-page__item',\n        showChangePanel && 'desktop-tasks-page__item_active',\n        checked && 'desktop-tasks-page__item_checked'\n      )}\n    >\n      <StyledTableCell align=\"left\">\n        <strong>\n          {`${formatTime(new Date(task.date).getDate())}/${formatTime(new Date(task.date).getMonth() + 1)}/${new Date(task.date).getFullYear()}`}\n        </strong> &nbsp;&nbsp;\n        <span>\n          {`${formatTime(new Date(task.start).getHours())}:${formatTime(new Date(task.start).getMinutes())} - ${formatTime(new Date(task.finish).getHours())}:${formatTime(new Date(task.finish).getMinutes())}`}\n        </span>\n      </StyledTableCell>\n      <StyledTableCell align=\"left\">\n        {task.name.join(\", \")}\n      </StyledTableCell>\n      <StyledTableCell align=\"left\">\n        {`${task.position} (${task.object})`}\n      </StyledTableCell>\n      <StyledTableCell align=\"left\">\n        {task.failure}\n      </StyledTableCell>\n      <StyledTableCell align=\"left\">\n        {task.fix} <br />\n        {!!task.files && !!task._id &&\n          <FilesDialog dir={task._id} files={(task.files as TaskFile[])} />\n        }\n      </StyledTableCell>\n      <StyledTableCell align=\"left\" width={0} className='desktop-tasks-page__item-actions'>\n        <ButtonGroup\n          size=\"small\"\n          aria-label=\"small outlined button group\"\n          className='desktop-tasks-page__item-actions-btns'\n          variant=\"contained\"\n        >\n          <Button\n            className='desktop-tasks-page__item-actions-btn'\n            onClick={toggleChecked}\n          >\n            <ErrorOutlineIcon />\n          </Button>\n          <Button\n            className='desktop-tasks-page__item-actions-btn'\n            onClick={() => openEditForm(task)}\n          >\n            <EditIcon />\n          </Button>\n          <Button\n            className='desktop-tasks-page__item-actions-btn'\n            onClick={removeItem}\n          >\n            <DeleteForeverIcon />\n          </Button>\n        </ButtonGroup>\n      </StyledTableCell>\n    </StyledTableRow>\n  )\n}\n\nexport default DesktopTaskItem\n","/Users/electronic/Documents/projects/kip/TasksManager/client/src/components/TasksPage/components/NewTaskForm.tsx",["314"],"import React, { useEffect, useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport TextField from '@material-ui/core/TextField';\nimport { PersonType, TaskFile, TasksType, WorkshopsType } from '../../../types/global';\nimport DatePicker from \"react-datepicker\";\nimport { useDispatch, useSelector } from 'react-redux';\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport { StoreType } from '../../../types/store';\nimport { FormControl, Input, InputLabel, ListItemText, Select, Checkbox, MenuItem } from '@material-ui/core'\nimport { Autocomplete } from '@material-ui/lab'\nimport { CompletedMessage, ValidateError } from '../../shared/Message'\nimport { createNewTask, updateTask } from '../../../actions/tasksActions'\nimport FileInput from '../../shared/InputFiles';\nimport PrevFileItem from 'src/components/shared/InputFiles/PrevFileItem';\nimport api from 'src/api';\n\ntype Props = {\n  onClose: () => void\n  prevTask?: TasksType | null\n}\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    overflow: 'hidden',\n    paddingTop: 5,\n    '& > *': {\n      margin: theme.spacing(1),\n      width: \"95%\"\n    },\n  },\n}))\n\nconst AddNewTasks = ({ onClose, prevTask }: Props) => {\n  const defaultDate = new Date()\n  const classes = useStyles()\n  const dispatch = useDispatch()\n  const NameList = useSelector(({ persons }: StoreType) => persons.persons)\n  const workshopsList = useSelector(({ workshops }: StoreType) => workshops.workshops)\n  const { isSendingTask, showCompletedMessage } = useSelector(({ tasks }: StoreType) => tasks)\n  const [validateError, setValidateError] = useState(false)\n  const [prevFilesList, setPrevFilesList] = useState(prevTask?.files || [])\n  const [task, setTask] = useState<TasksType>({\n    date: prevTask?.date ? new Date(prevTask.date) : defaultDate,\n    name: prevTask?.name || [],\n    failure: prevTask?.failure || '',\n    fix: prevTask?.fix || '',\n    start: prevTask?.start ? new Date(prevTask?.start) : defaultDate,\n    finish: prevTask?.start ? new Date(prevTask?.finish) : defaultDate,\n    position: prevTask?.position || '',\n    object: prevTask?.object || '',\n    _id: prevTask?._id || null,\n    files: [],\n  })\n\n  useEffect(() => {\n    showCompletedMessage && setTimeout(() => onClose(), 2000)\n  }, [showCompletedMessage])\n\n  const handlePersons = (event: React.ChangeEvent<{ value: string[] | unknown }>) => {\n    const value = event.target.value as string[] | null\n    setTask({ ...task, name: value || [] })\n  }\n  const handleDateChange = (date: Date) => {\n    setTask({ ...task, date: date })\n  }\n  const handleStartChange = (date: Date) => {\n    setTask({ ...task, start: date })\n  }\n  const handleFinishChange = (date: Date) => {\n    setTask({ ...task, finish: date })\n  }\n  const handlePosition = (event: React.ChangeEvent<{ value: string | unknown }>) => {\n    const value = event.target.value as string | null\n    setTask({ ...task, position: value || '' })\n  }\n  const handleObject = (object: string | null) => {\n    setTask({ ...task, object: object || '' })\n  }\n  const handleFiles = (files: File[] = []) => {\n    setTask({ ...task, files: files })\n  }\n  const removeFileFromPrevList = async (file: TaskFile) => {\n    await api.removeFile(String(task._id), file.name)\n    setPrevFilesList((prevFilesList as TaskFile[])?.filter(({ name }) => name !== file.name))\n  }\n\n  const onCreateNewTask = async () => {\n    const { date, name, failure, fix, start, finish, position, object } = task\n    if (!prevTask && date && name && failure && fix && start && finish && position && object) {\n      dispatch(createNewTask(task))\n    } else {\n      setValidateError(true)\n      setTimeout(() => {\n        setValidateError(false)\n      }, 2000)\n    }\n  }\n\n  const onEditTask = async () => {\n    const { date, name, failure, fix, start, finish, position, object } = task\n    if (date || name || failure || fix || start || finish || position || object) {\n      prevTask?._id && dispatch(updateTask(task, prevFilesList))\n    } else {\n      setValidateError(true)\n      setTimeout(() => {\n        setValidateError(false)\n      }, 2000)\n    }\n  }\n\n  const onTaskAction = () => {\n    if (showCompletedMessage) {\n      onClose()\n      return\n    }\n    if (validateError) {\n      setValidateError(false)\n      return\n    }\n    prevTask ? onEditTask() : onCreateNewTask()\n  }\n\n  const handleChangeText = (event: any) => {\n    switch (event.target.id) {\n      case \"failure\":\n        setTask({ ...task, failure: event.target.value })\n        break\n      case \"fix\":\n        setTask({ ...task, fix: event.target.value })\n        break\n    }\n  }\n\n  return (\n    <Dialog\n      className={(!validateError && !showCompletedMessage) ? 'add-task-form' : undefined}\n      disableBackdropClick\n      disableEscapeKeyDown\n      open={true}\n      onClose={onClose}\n    >\n      {(!validateError && !showCompletedMessage) && (\n        <DialogContent>\n          <form className={classes.root} noValidate autoComplete=\"off\">\n            <div\n              className='add-task-form__date-picker-wrapper add-task-form__date-picker-wrapper_first'\n            >\n              <DatePicker\n                selected={task.date}\n                onChange={(date: Date) => handleDateChange(date)}\n                locale='ru'\n                dateFormat='dd.MM.yyyy'\n                className='add-task-form__date-picker add-task-form__date-picker_first'\n              />\n            </div>\n            <div className=\"add-task-form__date-picker-container\">\n              <div className='add-task-form__date-picker-wrapper'>\n                <span className='add-task-form__date-picker-text'>Приступил</span>\n                <DatePicker\n                  selected={task.start}\n                  onChange={(date: Date) => handleStartChange(date)}\n                  showTimeSelect\n                  showTimeSelectOnly\n                  timeIntervals={10}\n                  timeFormat=\"HH:mm\"\n                  timeCaption=\"Time\"\n                  dateFormat='HH:mm   dd.MM.yy'\n                  className='add-task-form__date-picker'\n                />\n              </div>\n              <div className='add-task-form__date-picker-wrapper'>\n                <span className='add-task-form__date-picker-text'>Завершил</span>\n                <DatePicker\n                  selected={task.finish}\n                  onChange={(date: Date) => handleFinishChange(date)}\n                  showTimeSelect\n                  showTimeSelectOnly\n                  timeIntervals={10}\n                  timeFormat=\"HH:mm\"\n                  timeCaption=\"Time\"\n                  dateFormat='HH:mm   dd.MM.yy'\n                  className='add-task-form__date-picker'\n                />\n              </div>\n            </div>\n            <FormControl>\n              <InputLabel id=\"demo-mutiple-checkbox-label\">\n                Исполнитель(ли)\n              </InputLabel>\n              <Select\n                labelId=\"demo-mutiple-checkbox-label\"\n                id=\"demo-mutiple-checkbox\"\n                multiple\n                value={task.name}\n                onChange={handlePersons}\n                input={<Input />}\n                renderValue={(selected) => (selected as string[]).join(', ')}\n              >\n                {(NameList as PersonType[]).map(({ _id, name, surname }, i) => (\n                  <MenuItem key={_id || i} value={`${surname} ${name}`}>\n                    <Checkbox\n                      checked={(task.name as string[]).indexOf(`${surname} ${name}`) > -1}\n                      color=\"primary\"\n                    />\n                    <ListItemText primary={`${surname} ${name}`} />\n                  </MenuItem>\n                ))}\n              </Select>\n            </FormControl>\n            <div className=\"add-task-form__position-wrapper\">\n              <FormControl className='add-task-form__position'>\n                <InputLabel id=\"demo-customized-select-label\">Цех</InputLabel>\n                <Select\n                  labelId=\"demo-customized-select-label\"\n                  id=\"demo-mutiple-checkbox\"\n                  value={task.position}\n                  onChange={handlePosition}\n                  input={<Input />}\n                >\n                  {(workshopsList as WorkshopsType[]).map((item, i) => (\n                    <MenuItem value={item.name} key={item._id || i}>{item.name}</MenuItem>\n                  ))}\n                </Select>\n              </FormControl>\n              <FormControl\n                className='add-task-form__position add-task-form__position_second'\n              >\n                <Autocomplete\n                  id=\"free-solo-demo\"\n                  freeSolo\n                  value={task.object}\n                  className='add-task-form__position-autocomplete'\n                  onChange={(event: any, newValue: string | null) => {\n                    handleObject(newValue)\n                  }}\n                  onInputChange={(event, newInputValue) => {\n                    handleObject(newInputValue)\n                  }}\n                  options={\n                    (!task.position || !workshopsList.length) ? [] :\n                      workshopsList.filter((item) => item.name === task.position)[0]?.object.map(str => str[0].toUpperCase() + str.slice(1)).sort()\n                  }\n                  renderInput={(params: any) => (\n                    <TextField {...params} label='Объект' id=\"standard-basic\" fullWidth />\n                  )}\n                />\n              </FormControl>\n            </div>\n            <TextField\n              value={task.failure}\n              onChange={handleChangeText}\n              id=\"failure\"\n              label=\"Описание проблемы\"\n            />\n            <TextField\n              value={task.fix}\n              onChange={handleChangeText}\n              multiline\n              id='fix'\n              rows=\"4\"\n              label=\"Принятые меры\"\n            />\n            <div className=\"input-file__files-list\">\n              {!!prevFilesList?.length && !!task._id &&\n                (prevFilesList as TaskFile[]).map(item => (\n                  <PrevFileItem\n                    key={item.name}\n                    file={item}\n                    dir={String(task._id)}\n                    removeFile={removeFileFromPrevList}\n                  />\n                ))\n              }\n            </div>\n            <FileInput onChooseFiles={handleFiles} />\n          </form>\n        </DialogContent>\n      )}\n      {validateError && <ValidateError />}\n      {showCompletedMessage && <CompletedMessage isUpdate={!!prevTask} />}\n      <DialogActions>\n        <Button onClick={onClose} color=\"primary\" disabled={validateError}>\n          Cancel\n          </Button>\n        <Button onClick={onTaskAction} color=\"primary\" disabled={isSendingTask}>\n          Ok\n          </Button>\n      </DialogActions>\n    </Dialog>\n  )\n}\n\nexport default AddNewTasks\n","/Users/electronic/Documents/projects/kip/TasksManager/client/src/components/TasksPage/components/MobileTaskItem.tsx",[],"/Users/electronic/Documents/projects/kip/TasksManager/client/src/components/NavDrawer/components/Acces.tsx",[],"/Users/electronic/Documents/projects/kip/TasksManager/client/src/components/NavDrawer/components/FixedBtn.tsx",[],"/Users/electronic/Documents/projects/kip/TasksManager/client/src/components/NavDrawer/components/Search.tsx",["315","316"],"import React, { useEffect, useState } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport ListItem from '@material-ui/core/ListItem'\nimport ListItemIcon from '@material-ui/core/ListItemIcon'\nimport ListItemText from '@material-ui/core/ListItemText'\nimport SearchIcon from '@material-ui/icons/Search'\nimport TextField from '@material-ui/core/TextField'\nimport { StoreType } from '../../../types/store'\nimport { getAllTasks, setSearchQuery } from '../../../actions/tasksActions'\nimport _ from 'lodash'\nimport { useDebounce } from 'src/components/shared/Hooks'\n\nconst Search = () => {\n  const dispatch = useDispatch()\n  const { filterBy, searchQuery, limit } = useSelector(({ filter }: StoreType) => filter)\n  const [isActive, setIsActive] = useState(false)\n\n  const debouncedSearch = useDebounce(searchQuery, 1000)\n\n  useEffect(() => {\n    dispatch(getAllTasks(limit, filterBy, debouncedSearch))\n  }, [debouncedSearch])\n\n  const openSearchInput = () => {\n    setIsActive(true)\n  }\n\n  const closeSearchInput = () => {\n    !searchQuery.length && setIsActive(false)\n  }\n\n  const handleChangeQuery = (event: React.ChangeEvent<HTMLInputElement>): void => {\n    dispatch(setSearchQuery(event.target.value))\n  }\n\n  return (\n    <ListItem\n      className='nav-drawer__filter'\n      onMouseLeave={closeSearchInput}\n    >\n      <ListItemIcon>\n        <SearchIcon color={searchQuery.length ? 'error' : 'inherit'} />\n      </ListItemIcon>\n      {isActive\n        ? (\n          <TextField\n            value={searchQuery}\n            onChange={handleChangeQuery}\n            id=\"name\"\n            placeholder='Поиск'\n            onMouseLeave={closeSearchInput}\n          />\n        ) : (\n          <ListItemText\n            primary={'Поиск'}\n            onMouseEnter={openSearchInput}\n          />\n        )}\n    </ListItem>\n  )\n}\n\nexport default Search\n","/Users/electronic/Documents/projects/kip/TasksManager/client/src/components/NavDrawer/components/Filter.tsx",["317"],"import React, { useEffect, useState } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport ListItemIcon from '@material-ui/core/ListItemIcon'\nimport ListItemText from '@material-ui/core/ListItemText'\nimport SortIcon from '@material-ui/icons/Sort'\nimport Accordion from '@material-ui/core/Accordion'\nimport AccordionDetails from '@material-ui/core/AccordionDetails'\nimport AccordionSummary from '@material-ui/core/AccordionSummary'\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore'\nimport Radio from '@material-ui/core/Radio'\nimport RadioGroup from '@material-ui/core/RadioGroup'\nimport FormControlLabel from '@material-ui/core/FormControlLabel'\nimport FormControl from '@material-ui/core/FormControl'\nimport { WorkshopsType } from '../../../types/global'\nimport { FilterStoreType, StoreType } from '../../../types/store'\nimport { setFilter } from '../../../actions/tasksActions'\n\ntype PropsType = {\n  isOpen: boolean\n}\n\nconst Filter = ({ isOpen }: PropsType) => {\n  const dispatch = useDispatch()\n  const workshops: WorkshopsType[] =\n    useSelector(({ workshops }: StoreType) => workshops.workshops)\n  const { filterBy }: FilterStoreType = useSelector(({ filter }: StoreType) => filter)\n  const [expanded, setExpanded] = useState<boolean>(false)\n\n  const changeFilter = (event: React.ChangeEvent<HTMLInputElement>): void => {\n    dispatch(setFilter(event.target.value))\n  }\n\n  const handleAccordion = (event: React.ChangeEvent<{}>): void => {\n    setExpanded(!expanded)\n  }\n\n  return (\n    <Accordion expanded={expanded && isOpen} onChange={handleAccordion}>\n      <AccordionSummary\n        className='nav-drawer__filter'\n        expandIcon={<ExpandMoreIcon />}\n      >\n        <ListItemIcon>\n          <SortIcon color={filterBy !== 'Все' ? 'error' : 'inherit'} />\n        </ListItemIcon>\n        <ListItemText primary={'Фильтр'} />\n      </AccordionSummary>\n      <AccordionDetails>\n        <FormControl component=\"fieldset\">\n          <RadioGroup\n            value={filterBy}\n            onChange={changeFilter}\n          >\n            <FormControlLabel\n              className='nav-drawer__radio-buttom'\n              value=\"Все\"\n              control={<Radio />}\n              label=\"Все\"\n            />\n            {workshops?.map((item, i) => (\n              <FormControlLabel\n                className='nav-drawer__radio-buttom'\n                key={item._id || i}\n                value={item.name}\n                control={<Radio />}\n                label={item.name}\n              />\n            ))}\n          </RadioGroup>\n        </FormControl>\n      </AccordionDetails>\n    </Accordion>\n  )\n}\n\nexport default Filter\n","/Users/electronic/Documents/projects/kip/TasksManager/client/src/components/SettingsPage/components/PasswordSettings.tsx",[],"/Users/electronic/Documents/projects/kip/TasksManager/client/src/components/StatisticsPage/components/DateStatistics.tsx",["318"],"import _ from 'lodash';\nimport React from 'react';\nimport { useSelector } from 'react-redux';\nimport { XAxis, YAxis, CartesianGrid, Tooltip, Legend, AreaChart, Area } from 'recharts';\nimport { StoreType } from 'src/types/store';\nimport { COLORS } from '../constants';\nimport { Box, Grid, Typography } from '@material-ui/core';\nimport useStyles from '../styles';\nimport { CustomizedAxisTick } from './CustomComponent';\nimport { WorkshopsType } from 'src/types/global';\nimport { isMobileOnly } from 'react-device-detect';\n\nconst DateStatistics = () => {\n  const classes = useStyles()\n  const { statistics } = useSelector(({ statistics }: StoreType) => statistics)\n  const { workshops } = useSelector(({ workshops }: StoreType) => workshops)\n  const widthFix = isMobileOnly ? 50 : 70\n  if (!statistics.date?.length || statistics.date?.length < 6) return null\n  return (\n    <Grid>\n      <Box className={classes.itemTitle}>\n        <Typography variant=\"h5\">\n          Общий график заявленных неисправностей за год\n        </Typography>\n      </Box>\n\n      <Box className={classes.itemWrapper}>\n        <AreaChart\n          width={statistics.date.length * widthFix}\n          height={620}\n          data={statistics.date}\n          margin={{\n            top: 20, right: 20, left: 30, bottom: 5,\n          }}\n        >\n          <defs>\n          {(workshops as WorkshopsType[])?.map((w, i) => (\n            <linearGradient id={String(i)} x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\" key={i}>\n              <stop offset=\"15%\" stopColor={COLORS[i % COLORS.length]} stopOpacity={0.5} />\n              <stop offset=\"60%\" stopColor={COLORS[i % COLORS.length]} stopOpacity={0} />\n          </linearGradient>\n          ))}\n          </defs>\n          <CartesianGrid strokeDasharray=\"3 3\" />\n          <XAxis dataKey=\"name\" interval={0} height={120} tick={<CustomizedAxisTick />} />\n          <YAxis type=\"number\" />\n          <YAxis />\n          <Tooltip />\n          <Legend />\n          {(workshops as WorkshopsType[])?.map((w, i) => (\n            <Area\n              key={i}\n              type=\"monotone\"\n              dataKey={w.name}\n              stroke={COLORS[i % COLORS.length]}\n              strokeWidth={2}\n              activeDot={{ r: 6 }}\n              fill={`url(#${i})`}\n            />\n          ))}\n\n        </AreaChart>\n      </Box>\n    </Grid>\n  )\n}\n\nexport default DateStatistics\n","/Users/electronic/Documents/projects/kip/TasksManager/client/src/components/StatisticsPage/components/PositionsStatistics.tsx",["319","320"],"import _ from 'lodash';\nimport React from 'react';\nimport { useSelector } from 'react-redux';\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, LabelList, Cell } from 'recharts';\nimport { StoreType } from 'src/types/store';\nimport { COLORS } from '../constants';\nimport { Box, Grid, Typography } from '@material-ui/core';\nimport useStyles from '../styles';\nimport { CustomizedAxisTick, CustomTooltip } from './CustomComponent';\n\nconst PositionsStatistics = () => {\n  const classes = useStyles()\n  const { statistics } = useSelector(({ statistics }: StoreType) => statistics)\n\n  if (!statistics.positions?.length) return null\n  return (\n    <Grid>\n      <Box className={classes.itemTitle} style={{ marginLeft: 20 }}>\n        <Typography variant=\"subtitle1\">\n          Заявленные неисправностей\n        </Typography>\n      </Box>\n\n      <Box className={classes.itemWrapper}>\n        <BarChart\n          width={statistics.positions.length * 70}\n          height={420}\n          data={statistics.positions}\n          margin={{\n            top: 5, right: 0, left: 0, bottom: 5,\n          }}\n        >\n          <CartesianGrid strokeDasharray=\"3 3\" />\n          <XAxis dataKey=\"name\" interval={0} height={120} tick={<CustomizedAxisTick />} />\n          <YAxis type=\"number\" />\n          <Tooltip content={<CustomTooltip />} />\n          <Bar dataKey=\"value\" fill=\"#8884d8\" width={60}>\n            {statistics.positions.map((entry, index) => <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />)}\n          </Bar>\n        </BarChart>\n      </Box>\n    </Grid>\n  )\n}\n\nexport default PositionsStatistics\n","/Users/electronic/Documents/projects/kip/TasksManager/client/src/components/StatisticsPage/components/LandscapeWarning.tsx",["321"],"import React from 'react'\nimport { Backdrop } from '@material-ui/core'\nimport RotateIcon from '../images/phone-rotation.svg'\nimport useStyles from '../styles'\n\nconst LandscapeWarning = () => {\n  const classes = useStyles()\n  return (\n    <Backdrop open className={classes.rotateWarning} >\n      <img\n        src={RotateIcon}\n        alt='file-image'\n      />\n    </Backdrop>\n  )\n}\n\nexport default LandscapeWarning\n","/Users/electronic/Documents/projects/kip/TasksManager/client/src/components/StatisticsPage/components/PersonsStatistics.tsx",["322"],"import _ from 'lodash';\nimport React from 'react';\nimport { useSelector } from 'react-redux';\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Cell } from 'recharts';\nimport { StoreType } from 'src/types/store';\nimport { COLORS } from '../constants';\nimport { Box, Grid, Typography } from '@material-ui/core';\nimport useStyles from '../styles';\nimport { CustomizedAxisTick, CustomTooltip } from './CustomComponent';\n\nconst PersonsStatistics = () => {\n  const classes = useStyles()\n  const { statistics } = useSelector(({ statistics }: StoreType) => statistics)\n\n  if (!statistics.persons?.length) return null\n  return (\n    <Grid>\n      <Box className={classes.itemTitle} style={{ marginLeft: 20 }}>\n        <Typography variant=\"subtitle1\">\n          Активность сотрудников\n        </Typography>\n      </Box>\n\n      <Box className={classes.itemWrapper}>\n        <BarChart\n          width={statistics.persons.length * 50}\n          height={420}\n          data={statistics.persons}\n          margin={{\n            top: 5, right: 0, left: 0, bottom: 5,\n          }}\n        >\n          <CartesianGrid strokeDasharray=\"3 3\" />\n          <XAxis dataKey=\"name\" interval={0} height={120} tick={<CustomizedAxisTick />} />\n          <YAxis type=\"number\" />\n          <Tooltip content={<CustomTooltip />} />\n          <Bar dataKey=\"value\" fill=\"#8884d8\" width={40}>\n            {statistics.persons.map((entry, index) => <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />)}\n          </Bar>\n        </BarChart>\n      </Box>\n    </Grid>\n  )\n}\n\nexport default PersonsStatistics\n","/Users/electronic/Documents/projects/kip/TasksManager/client/src/components/Preloader/index.ts",[],"/Users/electronic/Documents/projects/kip/TasksManager/client/src/components/StatisticsPage/constants.ts",[],"/Users/electronic/Documents/projects/kip/TasksManager/client/src/components/shared/Message.tsx",[],"/Users/electronic/Documents/projects/kip/TasksManager/client/src/components/shared/InputFiles/PrevFileItem.tsx",["323","324"],"import React, { useEffect, useState } from 'react'\nimport { HighlightOff } from '@material-ui/icons'\nimport pdfIcon from './images/pdf-icon.svg'\nimport docIcon from './images/doc-icon.svg'\nimport { TaskFile } from 'src/types/global'\nimport api from 'src/api'\n\nimport './InputFile.scss'\n\ntype Props = {\n  dir: string\n  file: TaskFile\n  removeFile: (f: TaskFile) => void\n}\n\nconst PrevFileItem = ({ dir, file, removeFile }: Props) => {\n  const [fileUrl, setFileUrl] = useState('')\n  useEffect(() => {\n    getFile()\n  }, [])\n\n  const getFile = async () => {\n    try {\n      const { url }: any = await api.downloadFile(dir, file.name)\n      url && setFileUrl(url)\n    } catch (error) {}\n  }\n\n  const getImage = (str: string) => {\n    if (!str) return\n    if (str.includes('.doc')) {\n      return docIcon\n    }\n    if (str.includes('.pdf')) {\n      return pdfIcon\n    }\n    return fileUrl\n  }\n\n  return (\n    <div id='qwerty' className='input-file__image-wrapper'>\n      <img\n        className=\"input-file__image\"\n        src={getImage(file.name)}\n        alt='file-image'\n      />\n      <div className=\"input-file__preview-text\">{file.name}</div>\n      <HighlightOff\n        onClick={() => removeFile(file)}\n        style={{\n          position: 'absolute',\n          top: -5,\n          right: -5,\n          width: 25,\n          height: 25,\n          color: 'rgba(0, 0, 0, .6)',\n          background: '#fff',\n          borderRadius: '50%',\n          cursor: 'pointer'\n        }}\n      />\n    </div>\n  )\n}\n\nexport default PrevFileItem\n","/Users/electronic/Documents/projects/kip/TasksManager/client/src/components/shared/Hooks.tsx",["325"],"import { useState, useEffect } from 'react'\n\nexport const useDebounce = (value: string, delay: number) => {\n  const [debouncedValue, setDebouncedValue] = useState(value)\n  useEffect(() => {\n    const handler = setTimeout(() => setDebouncedValue(value), delay)\n    return () => clearTimeout(handler)\n  }, [value])\n  return debouncedValue\n}\n","/Users/electronic/Documents/projects/kip/TasksManager/client/src/components/StatisticsPage/components/CustomComponent.tsx",[],"/Users/electronic/Documents/projects/kip/TasksManager/client/src/components/TasksPage/components/FilesDialog.tsx",[],"/Users/electronic/Documents/projects/kip/TasksManager/client/src/components/Preloader/Preloader.tsx",[],"/Users/electronic/Documents/projects/kip/TasksManager/client/src/components/shared/InputFiles/index.ts",[],"/Users/electronic/Documents/projects/kip/TasksManager/client/src/components/TasksPage/components/FileItem.tsx",["326","327","328"],"import React, { useEffect, useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport { TaskFile } from 'src/types/global';\nimport api from 'src/api';\nimport pdfIcon from './images/pdf-icon.svg'\nimport docIcon from './images/doc-icon.svg'\nimport { Box, createStyles, Theme } from '@material-ui/core';\nimport formatSize from 'src/utils/formatSize';\n\ntype ItemProps = {\n  file: TaskFile\n  dir: string\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    container: {\n      cursor: 'pointer',\n      position: 'relative',\n      '&:hover': {\n        backgroundColor: '#d4f7ff',\n      },\n    },\n    wrapper: {\n      position: 'relative',\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'center',\n      width: 100,\n      height: 100,\n      border: '1px solid rgba(0, 0, 0, 0.2)',\n      minHeight: 60,\n    },\n    image: {\n      height: 'auto',\n      width: '100%',\n    },\n    textWrapper: {\n      display: 'flex',\n      flexDirection: 'column',\n      height: '100%',\n      maxWidth: 300,\n      paddingLeft: 20,\n      paddingRight: 10,\n      '& > * > span': {\n        width: '100%',\n        whiteSpace: 'nowrap',\n        overflow: 'hidden',\n        textOverflow: 'ellipsis',\n      }\n    },\n    fileBlock: {\n      display: 'flex',\n      alignItems: 'center',\n    }\n  })\n)\n\nconst FileItem = ({ file, dir }: ItemProps) => {\n  const classes = useStyles()\n  const [fileUrl, setFileUrl] = useState('')\n  useEffect(() => {\n    getFile()\n  }, [])\n\n  const getFile = async () => {\n    try {\n      const { url }: any = await api.downloadFile(dir, file.name)\n      url && setFileUrl(url)\n    } catch (error) {}\n  }\n\n  const getImage = (str: string) => {\n    if (str.includes('.doc')) {\n      return docIcon\n    }\n    if (str.includes('.pdf')) {\n      return pdfIcon\n    }\n    return fileUrl\n  }\n\n  return !fileUrl ? null : (\n    <ListItem key={file.name} className={classes.container}>\n      <a href={fileUrl} target='_blank' className={classes.fileBlock}>\n        <ListItemAvatar>\n          <Box className={classes.wrapper}>\n            <img src={getImage(file.name)} className={classes.image} />\n          </Box>\n        </ListItemAvatar>\n        <Box className={classes.textWrapper}>\n          <ListItemText primary={file.name} />\n          <ListItemText primary={formatSize(file.size)} />\n        </Box>\n      </a>\n    </ListItem>\n  )\n}\n\nexport default FileItem\n","/Users/electronic/Documents/projects/kip/TasksManager/client/src/components/shared/InputFiles/InputFiles.tsx",["329","330"],"import React, { useEffect, useState } from 'react'\nimport AttachFileIcon from '@material-ui/icons/AttachFile';\nimport HighlightOff from '@material-ui/icons/HighlightOff';\nimport pdfIcon from './images/pdf-icon.svg'\nimport docIcon from './images/doc-icon.svg'\n\nimport './InputFile.scss'\n\ntype Props = {\n  onChooseFiles: (file: File[]) => void\n}\n\nconst FileInput = ({ onChooseFiles }: Props) => {\n  const [files, setFiles] = useState<File[]>([])\n\n  useEffect(() => {\n    onChooseFiles(files?.length ? files : [])\n  }, [files])\n\n  const onChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const filesList = [...files, ...e.currentTarget.files]\n    setFiles(filesList)\n    onChooseFiles(filesList)\n  }\n\n  const removeFile = (f: File) => {\n    let newArr = files?.filter(x => x !== f)\n    setFiles(newArr)\n  }\n\n  const getImage = (f: File) => {\n    if (f.type.includes('image/')) {\n      return URL.createObjectURL(f)\n    }\n    if (f.type.includes('/pdf')) {\n      return pdfIcon\n    }\n    return docIcon\n  }\n\n  return (\n    <div className='input-file'>\n      <label className=\"input-file__btn\">\n        <input type=\"file\" multiple onChange={onChange} accept=\"image/*, application/pdf, .doc\" />\n        <AttachFileIcon style={{ width: 16, height: 16, marginRight: 5 }} />\n        <span>Прикрепить файлы</span>\n      </label>\n      {!!files?.length && (\n        <div className=\"input-file__files-list\">\n          {files?.map((f, i) =>\n            <div key={i} className='input-file__image-wrapper'>\n              <img\n                className=\"input-file__image\"\n                src={getImage(f)}\n              />\n              <div className=\"input-file__preview-text\">{f.name}</div>\n              <HighlightOff\n                onClick={() => removeFile(f)}\n                style={{\n                  position: 'absolute',\n                  top: -5,\n                  right: -5,\n                  width: 25,\n                  height: 25,\n                  color: 'rgba(0, 0, 0, .6)',\n                  background: '#fff',\n                  borderRadius: '50%',\n                  cursor: 'pointer'\n                }}\n              />\n            </div>\n          )}\n        </div>\n      )}\n    </div>\n  )\n}\n\nexport default FileInput\n","/Users/electronic/Documents/projects/kip/TasksManager/client/src/utils/formatSize.ts",["331"],"import { FormatSize } from '@material-ui/icons'\n\nconst formatSize = (size: number) => {\n  if(size > 1024*1024*1024) {\n      return (size/(1024*1024*1024)).toFixed(1)+\"Gb\"\n  }\n  if(size > 1024*1024) {\n      return (size/(1024*1024)).toFixed(1)+\"Mb\"\n  }\n  if(size > 1024) {\n      return (size/(1024)).toFixed(1)+\"Kb\"\n  }\n  return size+\"B\"\n}\n\nexport default formatSize\n",{"ruleId":"332","replacedBy":"333"},{"ruleId":"334","replacedBy":"335"},{"ruleId":"336","severity":1,"message":"337","line":22,"column":18,"nodeType":"338","messageId":"339","endLine":22,"endColumn":25},{"ruleId":"340","severity":1,"message":"341","line":29,"column":6,"nodeType":"342","endLine":29,"endColumn":8,"suggestions":"343"},{"ruleId":"340","severity":1,"message":"344","line":34,"column":6,"nodeType":"342","endLine":34,"endColumn":23,"suggestions":"345"},{"ruleId":"336","severity":1,"message":"346","line":2,"column":41,"nodeType":"338","messageId":"339","endLine":2,"endColumn":54},{"ruleId":"336","severity":1,"message":"347","line":2,"column":73,"nodeType":"338","messageId":"339","endLine":2,"endColumn":86},{"ruleId":"336","severity":1,"message":"348","line":2,"column":48,"nodeType":"338","messageId":"339","endLine":2,"endColumn":61},{"ruleId":"336","severity":1,"message":"349","line":2,"column":63,"nodeType":"338","messageId":"339","endLine":2,"endColumn":69},{"ruleId":"350","severity":1,"message":"351","line":8,"column":1,"nodeType":"352","endLine":28,"endColumn":2},{"ruleId":"350","severity":1,"message":"351","line":19,"column":1,"nodeType":"352","endLine":55,"endColumn":2},{"ruleId":"350","severity":1,"message":"351","line":10,"column":1,"nodeType":"352","endLine":30,"endColumn":2},{"ruleId":"350","severity":1,"message":"351","line":14,"column":1,"nodeType":"352","endLine":44,"endColumn":2},{"ruleId":"353","severity":1,"message":"354","line":39,"column":5,"nodeType":"355","messageId":"356","endLine":40,"endColumn":26},{"ruleId":"350","severity":1,"message":"351","line":9,"column":1,"nodeType":"352","endLine":39,"endColumn":2},{"ruleId":"350","severity":1,"message":"351","line":9,"column":1,"nodeType":"352","endLine":24,"endColumn":2},{"ruleId":"336","severity":1,"message":"357","line":5,"column":8,"nodeType":"338","messageId":"339","endLine":5,"endColumn":14},{"ruleId":"336","severity":1,"message":"358","line":6,"column":10,"nodeType":"338","messageId":"339","endLine":6,"endColumn":25},{"ruleId":"340","severity":1,"message":"359","line":32,"column":6,"nodeType":"342","endLine":32,"endColumn":20,"suggestions":"360"},{"ruleId":"340","severity":1,"message":"361","line":39,"column":6,"nodeType":"342","endLine":39,"endColumn":8,"suggestions":"362"},{"ruleId":"340","severity":1,"message":"361","line":48,"column":6,"nodeType":"342","endLine":48,"endColumn":8,"suggestions":"363"},{"ruleId":"336","severity":1,"message":"364","line":12,"column":8,"nodeType":"338","messageId":"339","endLine":12,"endColumn":19},{"ruleId":"336","severity":1,"message":"365","line":20,"column":8,"nodeType":"338","messageId":"339","endLine":20,"endColumn":22},{"ruleId":"340","severity":1,"message":"366","line":81,"column":5,"nodeType":"342","endLine":81,"endColumn":24,"suggestions":"367"},{"ruleId":"340","severity":1,"message":"368","line":38,"column":6,"nodeType":"342","endLine":38,"endColumn":8,"suggestions":"369"},{"ruleId":"340","severity":1,"message":"370","line":28,"column":6,"nodeType":"342","endLine":28,"endColumn":31,"suggestions":"371"},{"ruleId":"340","severity":1,"message":"372","line":32,"column":6,"nodeType":"342","endLine":32,"endColumn":33,"suggestions":"373"},{"ruleId":"336","severity":1,"message":"374","line":4,"column":39,"nodeType":"338","messageId":"339","endLine":4,"endColumn":47},{"ruleId":"336","severity":1,"message":"375","line":4,"column":49,"nodeType":"338","messageId":"339","endLine":4,"endColumn":65},{"ruleId":"336","severity":1,"message":"376","line":13,"column":8,"nodeType":"338","messageId":"339","endLine":13,"endColumn":18},{"ruleId":"340","severity":1,"message":"377","line":31,"column":6,"nodeType":"342","endLine":31,"endColumn":27,"suggestions":"378"},{"ruleId":"336","severity":1,"message":"379","line":1,"column":7,"nodeType":"338","messageId":"339","endLine":1,"endColumn":11},{"ruleId":"336","severity":1,"message":"380","line":3,"column":8,"nodeType":"338","messageId":"339","endLine":3,"endColumn":9},{"ruleId":"340","severity":1,"message":"381","line":62,"column":6,"nodeType":"342","endLine":62,"endColumn":8,"suggestions":"382"},{"ruleId":"340","severity":1,"message":"383","line":61,"column":6,"nodeType":"342","endLine":61,"endColumn":28,"suggestions":"384"},{"ruleId":"336","severity":1,"message":"380","line":10,"column":8,"nodeType":"338","messageId":"339","endLine":10,"endColumn":9},{"ruleId":"340","severity":1,"message":"385","line":22,"column":6,"nodeType":"342","endLine":22,"endColumn":23,"suggestions":"386"},{"ruleId":"336","severity":1,"message":"387","line":1,"column":17,"nodeType":"338","messageId":"339","endLine":1,"endColumn":26},{"ruleId":"336","severity":1,"message":"380","line":1,"column":8,"nodeType":"338","messageId":"339","endLine":1,"endColumn":9},{"ruleId":"336","severity":1,"message":"380","line":1,"column":8,"nodeType":"338","messageId":"339","endLine":1,"endColumn":9},{"ruleId":"336","severity":1,"message":"388","line":4,"column":63,"nodeType":"338","messageId":"339","endLine":4,"endColumn":72},{"ruleId":"389","severity":1,"message":"390","line":10,"column":7,"nodeType":"391","endLine":13,"endColumn":9},{"ruleId":"336","severity":1,"message":"380","line":1,"column":8,"nodeType":"338","messageId":"339","endLine":1,"endColumn":9},{"ruleId":"340","severity":1,"message":"392","line":20,"column":6,"nodeType":"342","endLine":20,"endColumn":8,"suggestions":"393"},{"ruleId":"389","severity":1,"message":"390","line":42,"column":7,"nodeType":"391","endLine":46,"endColumn":9},{"ruleId":"340","severity":1,"message":"394","line":8,"column":6,"nodeType":"342","endLine":8,"endColumn":13,"suggestions":"395"},{"ruleId":"340","severity":1,"message":"392","line":67,"column":6,"nodeType":"342","endLine":67,"endColumn":8,"suggestions":"396"},{"ruleId":"397","severity":1,"message":"398","line":88,"column":25,"nodeType":"399","endLine":88,"endColumn":40},{"ruleId":"400","severity":1,"message":"401","line":91,"column":13,"nodeType":"391","endLine":91,"endColumn":72},{"ruleId":"340","severity":1,"message":"402","line":18,"column":6,"nodeType":"342","endLine":18,"endColumn":13,"suggestions":"403"},{"ruleId":"400","severity":1,"message":"401","line":52,"column":15,"nodeType":"391","endLine":55,"endColumn":17},{"ruleId":"336","severity":1,"message":"404","line":1,"column":10,"nodeType":"338","messageId":"339","endLine":1,"endColumn":20},"no-native-reassign",["405"],"no-negated-in-lhs",["406"],"@typescript-eslint/no-unused-vars","'loading' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'dispatch' and 'limit'. Either include them or remove the dependency array.","ArrayExpression",["407"],"React Hook useEffect has missing dependencies: 'dispatch', 'searchQuery', and 'tasks?.length'. Either include them or remove the dependency array.",["408"],"'REMOVE_PERSON' is defined but never used.","'UPDATE_PERSON' is defined but never used.","'LOADING_TASKS' is defined but never used.","'LOGOUT' is defined but never used.","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","no-duplicate-case","Duplicate case label.","SwitchCase","unexpected","'sortBy' is defined but never used.","'FilterStoreType' is defined but never used.","React Hook useEffect has missing dependencies: 'currentScroll' and 'firstVisit'. Either include them or remove the dependency array.",["409"],"React Hook useEffect has a missing dependency: 'trackScrolling'. Either include it or remove the dependency array.",["410"],["411"],"'ReceiptIcon' is defined but never used.","'AssessmentIcon' is defined but never used.","React Hook useEffect has a missing dependency: 'history'. Either include it or remove the dependency array.",["412"],"React Hook useEffect has missing dependencies: 'dispatch' and 'workshopsList'. Either include them or remove the dependency array.",["413"],"React Hook useEffect has a missing dependency: 'isGuest'. Either include it or remove the dependency array.",["414"],"React Hook useEffect has missing dependencies: 'dispatch' and 'error'. Either include them or remove the dependency array.",["415"],"'Backdrop' is defined but never used.","'CircularProgress' is defined but never used.","'RotateIcon' is defined but never used.","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["416"],"'days' is assigned a value but never used.","'_' is defined but never used.","React Hook useEffect has a missing dependency: 'handleOuterClick'. Either include it or remove the dependency array.",["417"],"React Hook useEffect has a missing dependency: 'onClose'. Either include it or remove the dependency array. If 'onClose' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["418"],"React Hook useEffect has missing dependencies: 'dispatch', 'filterBy', and 'limit'. Either include them or remove the dependency array.",["419"],"'useEffect' is defined but never used.","'LabelList' is defined but never used.","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","React Hook useEffect has a missing dependency: 'getFile'. Either include it or remove the dependency array.",["420"],"React Hook useEffect has a missing dependency: 'delay'. Either include it or remove the dependency array.",["421"],["422"],"react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXAttribute","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","React Hook useEffect has a missing dependency: 'onChooseFiles'. Either include it or remove the dependency array. If 'onChooseFiles' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["423"],"'FormatSize' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"424","fix":"425"},{"desc":"426","fix":"427"},{"desc":"428","fix":"429"},{"desc":"430","fix":"431"},{"desc":"430","fix":"432"},{"desc":"433","fix":"434"},{"desc":"435","fix":"436"},{"desc":"437","fix":"438"},{"desc":"439","fix":"440"},{"desc":"441","fix":"442"},{"desc":"443","fix":"444"},{"desc":"445","fix":"446"},{"desc":"447","fix":"448"},{"desc":"449","fix":"450"},{"desc":"451","fix":"452"},{"desc":"449","fix":"453"},{"desc":"454","fix":"455"},"Update the dependencies array to be: [dispatch, limit]",{"range":"456","text":"457"},"Update the dependencies array to be: [dispatch, filterBy, limit, searchQuery, tasks?.length]",{"range":"458","text":"459"},"Update the dependencies array to be: [currentScroll, firstVisit, tasks.length]",{"range":"460","text":"461"},"Update the dependencies array to be: [trackScrolling]",{"range":"462","text":"463"},{"range":"464","text":"463"},"Update the dependencies array to be: [history, location.pathname]",{"range":"465","text":"466"},"Update the dependencies array to be: [dispatch, workshopsList]",{"range":"467","text":"468"},"Update the dependencies array to be: [location.hash, authType, isGuest]",{"range":"469","text":"470"},"Update the dependencies array to be: [password, email, authType, error, dispatch]",{"range":"471","text":"472"},"Update the dependencies array to be: [dispatch, firstDate, lastDate]",{"range":"473","text":"474"},"Update the dependencies array to be: [handleOuterClick]",{"range":"475","text":"476"},"Update the dependencies array to be: [onClose, showCompletedMessage]",{"range":"477","text":"478"},"Update the dependencies array to be: [debouncedSearch, dispatch, filterBy, limit]",{"range":"479","text":"480"},"Update the dependencies array to be: [getFile]",{"range":"481","text":"482"},"Update the dependencies array to be: [delay, value]",{"range":"483","text":"484"},{"range":"485","text":"482"},"Update the dependencies array to be: [files, onChooseFiles]",{"range":"486","text":"487"},[1060,1062],"[dispatch, limit]",[1177,1194],"[dispatch, filterBy, limit, searchQuery, tasks?.length]",[1479,1493],"[currentScroll, firstVisit, tasks.length]",[1664,1666],"[trackScrolling]",[1740,1742],[2484,2503],"[history, location.pathname]",[1848,1850],"[dispatch, workshopsList]",[1289,1314],"[location.hash, authType, isGuest]",[1380,1407],"[password, email, authType, error, dispatch]",[1317,1338],"[dispatch, firstDate, lastDate]",[1934,1936],"[handleOuterClick]",[2484,2506],"[onClose, showCompletedMessage]",[922,939],"[debouncedSearch, dispatch, filterBy, limit]",[517,519],"[getFile]",[304,311],"[delay, value]",[1670,1672],[516,523],"[files, onChooseFiles]"]